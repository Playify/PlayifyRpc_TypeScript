"use strict";const input=document.querySelector("input"),autocomplete=document.querySelector("#autocomplete"),result=document.querySelector("#result"),copy=document.querySelector("#copy");function setStatus(t,e,n,l){const o=new Date(l-new Date().getTimezoneOffset()*1e3*60).toJSON(),a=document.querySelector("#status");a.textContent=`${t} (${o.replace("T"," ").replace("Z","")})`,a.style.color=e,a.style.backgroundColor=n}let curr=0;async function runEval(t=()=>Rpc.evalString(input.value)){const e=++curr,n=Date.now();try{setStatus("Executing","cyan","blue",n),result.style.backgroundColor="rgba(0,0,255,10%)";const l=await t();if(e!=curr)return;result.textContent=l,result.style.backgroundColor="rgba(0,255,0,10%)";const o=Date.now();setStatus(`Success (${((o-n)/1e3).toFixed(3)}s)`,"lime","green",Date.now())}catch(l){if(e!=curr)return;result.textContent=l.trashLocalStack()+`


Exception data:`+JSON.stringify(l.data,null,"	"),result.style.backgroundColor="rgba(255,0,0,10%)";const o=Date.now();setStatus(`Failed (${((o-n)/1e3).toFixed(3)}s)`,"orangered","darkred",Date.now())}}let copyTimeout;copy.addEventListener("click",()=>{const t=document.createElement("textarea");t.value=result.textContent,t.style.position="fixed",t.style.left="-9999px",document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),copy.style.color="lime",copy.style.backgroundColor="darkgreen",clearTimeout(copyTimeout),copyTimeout=setTimeout(()=>{copy.style.color=null,copy.style.backgroundColor=null},250)}),document.querySelector("#execute").addEventListener("click",()=>runEval()),input.addEventListener("keydown",async t=>{let e;switch(t.key){case"ArrowUp":t.preventDefault(),e=autocomplete.querySelector(":scope>.active"),e?(e.classList.remove("active"),(e=e.previousElementSibling??e).classList.add("active")):(e=autocomplete.lastElementChild)?.classList.add("active");break;case"ArrowDown":t.preventDefault(),e=autocomplete.querySelector(":scope>.active"),e?(e.classList.remove("active"),(e=e.nextElementSibling??e).classList.add("active")):(e=autocomplete.firstElementChild)?.classList.add("active");break;case"Tab":t.preventDefault(),e=autocomplete.querySelector(":scope>.active,:scope>:only-child"),e?.onclick(null);return;case"Enter":t.preventDefault(),e=autocomplete.querySelector(":scope>.active"),e?e.onclick(null):runEval().catch(console.error);return;case"Escape":for(t.preventDefault();autocomplete.firstChild;)autocomplete.removeChild(autocomplete.lastChild);last="";return;default:return}}),input.addEventListener("input",updateAutoComplete),input.addEventListener("selectionchange",updateAutoComplete),document.addEventListener("selectionchange",updateAutoComplete);let last;async function updateAutoComplete(){const t=input.parentElement.matches(":focus-within")?input.selectionStart+"|"+input.selectionEnd+"|"+input.value:"";if(t==last)return;last=t;let e=t?await getAutoComplete():[];for(;autocomplete.firstChild;)autocomplete.removeChild(autocomplete.lastChild);autocomplete.append(...e)}let cachedTypes=null,cachedTypesTimeout,cachedMethodsType=null,cachedMethods=null,cachedMethodsTimeout;async function getAutoComplete(){let t=input.selectionStart??1/0,e=input.selectionEnd??1/0;t>e&&([t,e]=[e,t]);const n=input.value;let l=n.indexOf("(");if(l==-1)l=n.length;else if(e>l)return[];let o=n.lastIndexOf(".",l);if(o==-1||e<=o){cachedTypes??=Rpc.getAllTypes().finally(()=>console.log("Catching types")),clearTimeout(cachedTypesTimeout),cachedTypesTimeout=setTimeout(()=>cachedTypes=null,1e3);let a;try{a=await cachedTypes}catch(i){const c=document.createElement("div");return c.textContent="Error getting types: "+i.message,[c]}const d=n.substring(0,t);return a.filter(i=>i.startsWith(d)).map(i=>{const c=document.createElement("div"),r=c.appendChild(document.createElement("i"));return r.appendChild(document.createTextNode(d)),r.appendChild(document.createElement("b")).textContent=i.substring(d.length),c.appendChild(document.createTextNode(o!=-1?n.substring(o):".")),c.onclick=()=>{input.focus(),document.execCommand("selectAll",!1,null),document.execCommand("insertText",!1,c.textContent??""),input.selectionStart=input.selectionEnd=i.length+1},c})}else if(t>o){const a=n.substring(0,o);cachedMethodsType!=a&&(cachedMethodsType=a,cachedMethods=null);const d=cachedMethodsType;cachedMethods??=Rpc.createObject(cachedMethodsType)[RpcObjectGetMethods]().finally(()=>console.log("Catching methods for "+d)),clearTimeout(cachedMethodsTimeout),cachedMethodsTimeout=setTimeout(()=>cachedMethods=null,1e3);let i;try{i=await cachedMethods}catch(r){const s=document.createElement("div");return s.textContent="Error getting methods: "+r.message,s.style.backgroundColor="rgba(255,0,0,10%)",[s]}const c=n.substring(o+1,t);return i.filter(r=>r.toLowerCase().startsWith(c.toLowerCase())).map(r=>{const s=document.createElement("div");s.appendChild(document.createTextNode(d+"."));const u=s.appendChild(document.createElement("i"));return u.appendChild(document.createTextNode(r.substring(0,c.length))),u.appendChild(document.createElement("b")).textContent=r.substring(c.length),s.appendChild(document.createTextNode(n.length<=l?"()":n.substring(l))),s.onclick=()=>{input.focus(),document.execCommand("selectAll",!1,null),document.execCommand("insertText",!1,s.textContent??""),input.selectionStart=input.selectionEnd=d.length+r.length+2},s})}else return[]}
