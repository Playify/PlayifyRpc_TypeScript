{"version":3,"file":"rpc.js","sources":["../src/types/RpcError.ts","../src/connection/RpcId.ts","../src/internal/RegisteredTypes.ts","../src/types/functions/PendingCall.ts","../src/types/functions/FunctionCallContext.ts","../src/types/RemoteFunction.ts","../src/types/RpcObject.ts","../src/types/data/DynamicData.ts","../src/types/data/DataOutput.ts","../src/connection/Connection.ts","../src/types/data/DataInput.ts","../src/connection/WebSocketConnection.ts","../src/connection/IdAndName.ts","../src/types/RpcProviderDecorator.ts","../src/types/data/CustomDynamicTypeDecorator.ts","../src/rpc.ts"],"sourcesContent":["export class RpcError extends Error{\r\n\tpublic name: string;\r\n\tpublic from: string;\r\n\tpublic stackTrace: string;\r\n\r\n\tconstructor(type: string|null,from: string,message: string|null,stackTrace: string|Error|null|undefined){\r\n\t\tif(typeof stackTrace==\"string\"){\r\n\t\t\tsuper(message!);\r\n\t\t\tthis.stackTrace=stackTrace;\r\n\t\t}\r\n\t\telse if(stackTrace){\r\n\t\t\t// @ts-ignore\r\n\t\t\tsuper(message,{cause:stackTrace});\r\n\t\t\tthis.stackTrace=this.stack!.substring(this.stack!.indexOf('\\n')+1)+\"\\ncaused by: \"+stackTrace.stack;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// @ts-ignore\r\n\t\t\tsuper(message);\r\n\t\t\tthis.stackTrace=this.stack!.substring(this.stack!.indexOf('\\n')+1);\r\n\t\t}\r\n\t\tthis.name=type??\"UnknownRemoteError\";\r\n\t\tthis.from=from;\r\n\t\tthis.stack=this.name+\"(\"+from+\")\";\r\n\t\tif(message!=null) this.stack+=\": \"+message;\r\n\t\tif(stackTrace==null) return;\r\n\t\tthis.stack+=\"\\n\";\r\n\r\n\t\tthis.stackTrace=this.stackTrace.replaceAll(/^  +/gm,\"\\t\");\r\n\t\tthis.stack+=this.stackTrace;\r\n\t}\r\n}","\r\nexport const isNodeJs=globalThis?.process?.versions?.node!=null;\r\n\r\n\r\n\r\n//RpcId\r\nexport let RpcId: string;\r\nif(isNodeJs){\r\n\ttry{\r\n\t\t//RpcId=\"node@\"+(await import(\"os\")).hostname()+\"@\"+process.pid;\r\n\t\t//@ts-ignore\r\n\t\t// noinspection JSUnresolvedReference\r\n\t\tRpcId=\"node@\"+process.binding(\"os\").getHostname()+\"@\"+process.pid;//Needed to not use top level await\r\n\t}catch{\r\n\t\tRpcId=\"node@\"+process.platform+\":\"+process.arch+\"@\"+process.pid;\r\n\t}\r\n}else if(\"document\" in globalThis) RpcId=\"web@\"+document.location+\"@\"+Date.now().toString(36)+\"X\"+Math.random().toString(36).substring(2);\r\nelse throw new Error(\"Unknown Platform\");\r\n","import {isConnected} from \"../connection/WebSocketConnection\";\r\nimport {RpcId} from \"../connection/RpcId\";\r\nimport {callRemoteFunction} from \"../types/functions/FunctionCallContext\";\r\nimport {RpcObjectGetMethods} from \"../types/RpcObject\";\r\n\r\n\r\nexport type Func=(...args: any[])=>Promise<any>;\r\nexport type Invoker={\r\n\t[RpcObjectGetMethods]?: ()=>Promise<string[]>,\r\n\t[s: string]: Func | any,\r\n};\r\nexport const registeredFunctions: Invoker=Object.create(null);\r\nexport const registeredTypes=new Map<string,Invoker>();\r\nregisteredTypes.set(\"$\"+RpcId,registeredFunctions);\r\n\r\n\r\nexport async function registerType(type: string,invoker: Invoker): Promise<void>{\r\n\tif(registeredTypes.has(type)) return;\r\n\tregisteredTypes.set(type,invoker);\r\n\r\n\tif(isConnected)\r\n\t\ttry{\r\n\t\t\tawait callRemoteFunction(null,'+',type);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n}\r\n\r\nexport async function unregisterType(type: string): Promise<void>{\r\n\tif(!registeredTypes.has(type)) return;\r\n\tif(isConnected)\r\n\t\ttry{\r\n\t\t\tawait callRemoteFunction(null,'-',type);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\tregisteredTypes.delete(type);\r\n}\r\n\r\n\r\n\r\nasync function getMethods(invoker: Invoker): Promise<string[]>{\r\n\tconst getter=invoker[RpcObjectGetMethods];\r\n\tif(getter) return await getter.call(invoker);\r\n\r\n\tconst arr=[];\r\n\tfor(let key in invoker)\r\n\t\tif(typeof invoker[key]==\"function\")\r\n\t\t\tarr.push(key);\r\n\r\n\treturn arr;\r\n}\r\n\r\nexport async function invoke(invoker: Invoker,type: string,method: string | null,...args: any[]){\r\n\tif(method!=null){\r\n\t\tlet func=invoker[method];\r\n\t\tif(func==null){\r\n\t\t\tlet ignoreCase=(await getMethods(invoker)).find(s=>s.toLowerCase()==method.toLowerCase());\r\n\t\t\tif(ignoreCase!=null) func=invoker[ignoreCase];\r\n\t\t}\r\n\t\tconst reference=({})[method];//This is used, so .toString() and .__specialFunctions__() are not allowed\r\n\t\t\r\n\t\tif(func==null||func===reference) throw new Error(`Method \\\"${method}\\\" not found in \\\"${type}\\\"`);\r\n\t\treturn func.call(invoker,...args);\r\n\t}\r\n\r\n\tswitch(args.length==0?null: args[0]){\r\n\t\tcase \"M\":\r\n\t\t\treturn getMethods(invoker);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Invalid meta-call\");\r\n\t}\r\n}","import {FunctionCallContext} from \"./FunctionCallContext\";\r\n\r\ntype Action<T>=(t: T)=>void;\r\n\r\nexport class PendingCall<T=unknown> implements Promise<T>{\r\n\tpublic readonly [Symbol.toStringTag]: string=\"PendingCall\";\r\n\tpublic finished=false;\r\n\tpublic readonly promise: Promise<T>;\r\n\r\n\tconstructor(){\r\n\t\tthis.promise=new Promise((resolve,reject)=>{\r\n\t\t\tresolveCall.set(this as PendingCall,t=>{\r\n\t\t\t\tresolve(t);\r\n\t\t\t\tthis.finished=true\r\n\t\t\t});\r\n\t\t\trejectCall.set(this as PendingCall,e=>{\r\n\t\t\t\treject(e);\r\n\t\t\t\tthis.finished=true\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tcatch<TResult=never>(onrejected?: ((reason: any)=>(PromiseLike<TResult> | TResult)) | undefined | null): Promise<T | TResult>{\r\n\t\treturn this.promise.catch(onrejected);\r\n\t}\r\n\r\n\tfinally(onfinally?: (()=>void) | undefined | null): Promise<T>{\r\n\t\treturn this.promise.finally(onfinally);\r\n\t}\r\n\r\n\tthen<TResult1=T,TResult2=never>(onfulfilled?: ((value: T)=>(PromiseLike<TResult1> | TResult1)) | undefined | null,onrejected?: ((reason: any)=>(PromiseLike<TResult2> | TResult2)) | undefined | null): Promise<TResult1 | TResult2>{\r\n\t\treturn this.promise.then(onfulfilled,onrejected);\r\n\t}\r\n\r\n\t// noinspection JSUnusedLocalSymbols\r\n\tsendMessage(...args: any[]):PendingCall<T>{//overridden by callFunction and callLocal\r\n\t\treturn this;\r\n\t}\r\n\r\n\taddMessageListener<Args extends any[]=any[]>(func: (...args: Args)=>void):PendingCall<T>{\r\n\t\tregisterReceive(this,func as (...args: any[])=>void);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcancel(){}//overridden by callFunction and callLocal\r\n\r\n\t[Symbol.asyncIterator](): AsyncIterator<any[]>{\r\n\t\treturn getAsyncIterator(this);\r\n\t}\r\n}\r\n\r\nexport function getAsyncIterator(call: PendingCall | FunctionCallContext): AsyncIterator<unknown[]>{\r\n\tlet pending:unknown[][]=[];\r\n\tlet requests:((tuple:[unknown[]]|undefined)=>void)[]=[];//undefined means finished\r\n\tlet finished=call.finished;\r\n\t\r\n\tcall.promise.finally(()=>{\r\n\t\tfinished=true;\r\n\t\tfor(let request of requests) request(undefined);\r\n\t});\r\n\tcall.addMessageListener((...args)=>pending.push(args));\r\n\t\r\n\treturn {\r\n\t\tasync next(): Promise<IteratorResult<unknown[]>>{\r\n\t\t\tif(finished||call.finished)return{done:true,value:undefined};\r\n\t\t\tif(pending.length)return {done:false,value:pending.shift()!};\r\n\t\t\t\r\n\t\t\tconst requestResult=await new Promise<[unknown[]]|undefined>(res=>requests.push(res));\r\n\t\t\tif(requestResult==null) return {done:true,value:undefined};\r\n\t\t\treturn {done:false,value:requestResult[0]};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const resolveCall=new WeakMap<PendingCall,Action<any>>();\r\nexport const rejectCall=new WeakMap<PendingCall,Action<Error>>();\r\nexport const pendingMap=new WeakMap<PendingCall | FunctionCallContext,(any[])[]>();\r\nexport const listenersMap=new WeakMap<PendingCall | FunctionCallContext,((...args: any[])=>void)[]>();\r\n\r\nexport function registerReceive(call: PendingCall | FunctionCallContext,func: (...args: any[])=>void){\r\n\tif(listenersMap.has(call)){\r\n\t\tlistenersMap.get(call)!.push(func);\r\n\t}else{\r\n\t\tlistenersMap.set(call,[func]);\r\n\t\tconst pendings=pendingMap.get(call)??[];\r\n\t\tfor(let pending of pendings){\r\n\t\t\ttry{\r\n\t\t\t\tfunc(...pending);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(\"Error receiving pending: \",e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function runReceiveMessage(call: PendingCall | FunctionCallContext,args: any[]){\r\n\tif(call.finished) return;\r\n\r\n\tif(listenersMap.has(call)){\r\n\t\tfor(let func of listenersMap.get(call)!){\r\n\t\t\ttry{\r\n\t\t\t\tfunc(...args);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(\"Error receiving: \",e);\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(pendingMap.has(call)){\r\n\t\tpendingMap.set(call,[...pendingMap.get(call)!,args]);\r\n\t}else{\r\n\t\tpendingMap.set(call,[args]);\r\n\t}\r\n}","import {invoke,registeredTypes} from \"../../internal/RegisteredTypes\";\r\nimport {getAsyncIterator,PendingCall,registerReceive,rejectCall,resolveCall,runReceiveMessage} from \"./PendingCall\";\r\nimport {DataOutput} from \"../data/DataOutput\";\r\nimport {PacketType,sendCall,sendRaw} from \"../../connection/Connection\";\r\nimport {_webSocket,isConnected} from \"../../connection/WebSocketConnection\";\r\nimport {freeDynamic} from \"../data/DynamicData\";\r\n\r\n\r\nlet currentContext: FunctionCallContext | null=null;\r\n\r\nexport function runWithContext<T>(func: ()=>T,context: FunctionCallContext): T{\r\n\tconst previous: FunctionCallContext | null=currentContext;\r\n\tcurrentContext=context;\r\n\ttry{\r\n\t\treturn func();\r\n\t}finally{\r\n\t\tcurrentContext=previous;\r\n\t}\r\n}\r\n\r\nexport function getFunctionContext(): FunctionCallContext{\r\n\tif(currentContext==null) throw new Error(\"FunctionCallContext not available\");\r\n\treturn currentContext;\r\n}\r\n\r\n\r\nlet nextId=0;\r\n\r\nexport function callRemoteFunction<T=unknown>(type: string | null,method: string|null,...args: any[]): PendingCall<T>{\r\n\tif(type!=null){\r\n\t\tconst local=registeredTypes.get(type);\r\n\t\tif(local) return callLocalFunction(type,method,()=>invoke(local,type,method,...args));\r\n\t}\r\n\r\n\tconst call=new PendingCall<T>();\r\n\r\n\tconst already: unknown[]=[];\r\n\tcall.finally(()=>freeDynamic(already));\r\n\r\n\tconst buff=new DataOutput();\r\n\tconst callId=nextId++;\r\n\ttry{\r\n\t\tbuff.writeByte(PacketType.FunctionCall);\r\n\t\tbuff.writeLength(callId);\r\n\t\tbuff.writeString(type);\r\n\t\tbuff.writeString(method);\r\n\t\tbuff.writeArray(args,d=>buff.writeDynamic(d,already));\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t\treturn call;\r\n\t}\r\n\r\n\tif(!(isConnected||(type==null&&_webSocket!=null))){\r\n\t\trejectCall.get(call)?.(new Error(\"Not connected\"));\r\n\t\treturn call;\r\n\t}\r\n\tcall.sendMessage=(...msgArgs)=>{\r\n\t\tif(call.finished) return call;\r\n\t\tconst msg=new DataOutput();\r\n\t\tmsg.writeByte(PacketType.MessageToExecutor);\r\n\t\tmsg.writeLength(callId);\r\n\t\tconst list: unknown[]=[];\r\n\t\tmsg.writeArray(msgArgs,d=>msg.writeDynamic(d,list));\r\n\t\talready.push(...list);\r\n\r\n\t\tsendRaw(msg);\r\n\t\treturn call;\r\n\t};\r\n\tcall.cancel=()=>{\r\n\t\tif(call.finished) return;\r\n\t\tconst msg=new DataOutput();\r\n\t\tmsg.writeByte(PacketType.FunctionCancel);\r\n\t\tmsg.writeLength(callId);\r\n\r\n\t\tsendRaw(msg);\r\n\t};\r\n\r\n\tsendCall(callId,call,buff);\r\n\t\r\n\treturn call;\r\n}\r\n\r\n\r\nexport function callLocal<T>(func:()=>(Promise<T>|T)): PendingCall<T>{\r\n\treturn callLocalFunction(null,null,func);\r\n}\r\n\r\nfunction callLocalFunction<T>(type: string|null,method: string|null,func:()=>(Promise<T>|T)){\r\n\tconst call=new PendingCall<T>();\r\n\r\n\tconst controller=new AbortController();\r\n\tconst context: FunctionCallContext={\r\n\t\ttype,\r\n\t\tmethod,\r\n\t\tsendMessage:(...sending)=>{\r\n\t\t\tcall.finished||runReceiveMessage(call,sending);\r\n\t\t\treturn context;\r\n\t\t},\r\n\t\tget finished(){return call.finished},\r\n\t\tpromise:call,\r\n\t\taddMessageListener:(func: (...args: any[])=>void)=>{\r\n\t\t\tregisterReceive(context,func);\r\n\t\t\treturn context;\r\n\t\t},\r\n\t\tcancelToken:controller.signal,\r\n\t\tcancelSelf:()=>controller.abort(),\r\n\t\t[Symbol.asyncIterator]:()=>getAsyncIterator(context),\r\n\t};\r\n\tcall.sendMessage=(...received)=>{\r\n\t\tcall.finished||runReceiveMessage(context,received);\r\n\t\treturn call;\r\n\t};\r\n\tcall.cancel=()=>call.finished||context.cancelSelf();\r\n\r\n\ttry{\r\n\t\tconst promise: Promise<T> | T=runWithContext(func,context);\r\n\r\n\t\tif(promise instanceof Promise) promise.then(t=>resolveCall.get(call)?.(t),e=>rejectCall.get(call)?.(e));\r\n\t\telse resolveCall.get(call)?.(promise);\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t}\r\n\treturn call;\r\n}\r\n\r\nexport interface FunctionCallContext{\r\n\treadonly type: string|null\r\n\treadonly method: string|null\r\n\treadonly finished: boolean\r\n\treadonly promise: Promise<unknown>\r\n\r\n\tsendMessage(...args: any[]): FunctionCallContext\r\n\r\n\taddMessageListener(func: (...args: any[])=>void): FunctionCallContext\r\n\r\n\tcancelToken: AbortSignal\r\n\r\n\tcancelSelf(): void\r\n\r\n\t[Symbol.asyncIterator](): AsyncIterator<any[]>;\r\n}","import {RpcId} from \"../connection/RpcId\";\r\nimport {callRemoteFunction} from \"./functions/FunctionCallContext\";\r\nimport {PendingCall} from \"./functions/PendingCall\";\r\nimport {registeredFunctions} from \"../internal/RegisteredTypes\";\r\n\r\n\r\ntype ParamsOrEmpty<T>=T extends (...args: infer Params)=>any?Params: unknown extends T?any[]: [];\r\ntype ReturnTypeFromAnything<T>=T extends (...args: any)=>infer ReturnType?ReturnType: T;\r\ntype UnwrapPromise<T>=T extends Promise<infer PromiseType>?PromiseType: T;\r\n\r\nexport type RpcFunction<FuncOrReturnType>=InstanceType<typeof RpcFunction<FuncOrReturnType>>;\r\n\r\nexport const RpcFunction=class RpcFunction<FuncOrReturnType>\r\n\textends (function Extendable(func: Function){return Object.setPrototypeOf(func,new.target.prototype);} as any as {\r\n\t\tnew<FuncOrReturnType=unknown>(func: Function): {\r\n\t\t\t//Complex call signature from generic, to allow easier definition later on\r\n\t\t\t(...args: ParamsOrEmpty<FuncOrReturnType>): PendingCall<UnwrapPromise<ReturnTypeFromAnything<FuncOrReturnType>>>;\r\n\t\t}\r\n\t})<FuncOrReturnType>{\r\n\r\n\tconstructor(\r\n\t\tpublic readonly type: string,\r\n\t\tpublic readonly method: string,\r\n\t){super(callRemoteFunction.bind(null,type,method));}\r\n\r\n\r\n\ttoString(){\r\n\t\treturn `rpc (...params) => ${this.type??\"null\"}.${this.method}(...params)`;\r\n\t}\r\n};\r\n\r\nlet nextId: number=Date.now();\r\nconst functionCache=new WeakMap<((...args: any)=>any),string>();\r\n\r\nexport function registerFunction<T extends ((...args: any)=>any)>(func: T): RpcFunction<T>{\r\n\tif(func instanceof RpcFunction) return func;\r\n\tconst already=functionCache.get(func);\r\n\tif(already!=null)return new RpcFunction(\"$\"+RpcId,already);\r\n\tconst id=(nextId++).toString(16);\r\n\r\n\tregisteredFunctions[id]=func;\r\n\tfunctionCache.set(func,id);\r\n\r\n\tconst type=\"$\"+RpcId;\r\n\treturn new RpcFunction(type,id);\r\n}\r\n\r\nexport function unregisterFunction(func: RpcFunction<any>){\r\n\tconst type=\"$\"+RpcId;\r\n\tif(func.type!=type) throw new Error(\"Can't unregister RemoteFunction, that was not registered locally\");\r\n\r\n\tdelete registeredFunctions[func.method];\r\n\tfunctionCache.delete(func);\r\n}","import {RpcFunction} from \"./RemoteFunction\";\r\nimport {callRemoteFunction} from \"./functions/FunctionCallContext\";\r\n\r\nexport const RpcObjectType=Symbol(\"RpcObjectType\");\r\nexport const RpcObjectGetMethods=Symbol(\"RpcObjectGetMethods\");\r\nexport type RpcObject<T=RpcObjectTemplate,Type=string>={\r\n\t[x in keyof T]:\r\n\tx extends \"then\" | symbol?\r\n\t\tT[x]:\r\n\t\tT[x] extends (...args: any[])=>unknown?\r\n\t\t\tRpcFunction<T[x]>:\r\n\t\t\tRpcFunction<any>;\r\n} & {\r\n\t[RpcObjectType]: Type,\r\n\t[RpcObjectGetMethods]: ()=>Promise<string[]>\r\n};\r\n\r\nexport type RpcObjectTemplate={\r\n\t[s: string]: (...args: any[])=>unknown\r\n}\r\n\r\n\r\nexport function createRemoteObject<\r\n\tT extends object=RpcObjectTemplate,\r\n\tTypeString extends string=string\r\n>(\r\n\ttype: TypeString,\r\n\ttarget: T=new class RpcObject{[RpcObjectType]=type} as T,\r\n): RpcObject<T,TypeString>{\r\n\t\r\n\tconst cache=new Map<string,RpcFunction<any>>();\r\n\t\r\n\t\r\n\treturn new Proxy<RpcObject<T,TypeString>>(<any>target,{\r\n\t\tget(_: never,p: string | symbol): any{\r\n\t\t\tif(p==RpcObjectType) return type;\r\n\t\t\tif(p==RpcObjectGetMethods) return ()=>callRemoteFunction(type,null,\"M\");\r\n\t\t\tif(typeof p!=\"string\"||\r\n\t\t\t\tp==\"then\"//otherwise every RemoteObject would be thenable => would interfere with async await\r\n\t\t\t) return (<any>target)[p];\r\n\t\t\tif(cache.has(p)) return cache.get(p);\r\n\r\n\t\t\tconst func=new RpcFunction(\r\n\t\t\t\ttype,\r\n\t\t\t\tp);\r\n\t\t\tcache.set(p,func);\r\n\t\t\treturn func;\r\n\t\t},\r\n\t\tconstruct(target: any,argArray: any[]): object{\r\n\t\t\treturn new target(...argArray);\r\n\t\t},\r\n\t\thas(_:never,p: string | symbol): boolean{\r\n\t\t\treturn p==RpcObjectType||p==RpcObjectGetMethods||p in target;\r\n\t\t},\r\n\t});\r\n}\r\n\r\n\r\nexport const RPC_ROOT=new Proxy({},{\r\n\tget:(_,prop)=>typeof prop==\"string\"?createRemoteObject(prop):undefined,\r\n\thas:(_,prop)=>typeof prop==\"string\"&&prop!=\"then\",\r\n}) as Record<string,RpcObject>;","import {DataInput} from \"./DataInput\";\r\nimport {createRemoteObject,RpcObjectType} from \"../RpcObject\";\r\nimport {DataOutput} from \"./DataOutput\";\r\nimport {registerFunction,RpcFunction,unregisterFunction} from \"../RemoteFunction\";\r\n\r\nexport const writeRegistry: [id: string,check: (d: unknown)=>boolean,write: (data: DataOutput,o: unknown,already: unknown[])=>void][]=[];\r\nexport const readRegistry=new Map<string,(data: DataInput,already: unknown[])=>unknown>();\r\n\r\nexport function readDynamic(data: DataInput,already: unknown[]){\r\n\tlet objectId=data.readLength();\r\n\r\n\tif(objectId<0){\r\n\t\tobjectId= -objectId;\r\n\t\tswitch(objectId%4){\r\n\t\t\tcase 0:\r\n\t\t\t\treturn already[objectId/4];\r\n\t\t\tcase 1:\r\n\t\t\t\treturn new TextDecoder().decode(data.readBuffer((objectId-1)/4));\r\n\t\t\tcase 2:{\r\n\t\t\t\tconst o: Record<string,any>={};\r\n\t\t\t\talready.push(o);\r\n\t\t\t\tfor(let i=0; i<(objectId-2)/4; i++){\r\n\t\t\t\t\tconst key=data.readString();\r\n\t\t\t\t\to[key!]=readDynamic(data,already);\r\n\t\t\t\t}\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t\tcase 3:{\r\n\t\t\t\tconst o=new Array((objectId-3)/4);\r\n\t\t\t\talready.push(o);\r\n\t\t\t\tfor(let i=0; i<o.length; i++) o[i]=readDynamic(data,already);\r\n\t\t\t\treturn o;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error(\"Unreachable code reached\");\r\n\t}else if(objectId>=128){\r\n\t\tconst type=new TextDecoder().decode(data.readBuffer(objectId-128));\r\n\t\tconst registryEntry=readRegistry.get(type);\r\n\t\tif(registryEntry)\r\n\t\t\treturn registryEntry(data,already);\r\n\t\tthrow new Error(\"Unknown data type: \"+type);\r\n\t}else{\r\n\t\tswitch(String.fromCodePoint(objectId)){\r\n\t\t\tcase 'n':\r\n\t\t\t\treturn null;\r\n\t\t\tcase 't':\r\n\t\t\t\treturn true;\r\n\t\t\tcase 'f':\r\n\t\t\t\treturn false;\r\n\t\t\tcase 'i':\r\n\t\t\t\treturn data.readInt();\r\n\t\t\tcase 'd':\r\n\t\t\t\treturn data.readDouble();\r\n\t\t\tcase 'l':\r\n\t\t\t\treturn data.readLong();\r\n\t\t\tcase 'b':\r\n\t\t\t\treturn data.readBuffer(data.readLength());\r\n\t\t\tcase 'D':\r\n\t\t\t\treturn new Date(Number(data.readLong()));\r\n\t\t\tcase 'R':{\r\n\t\t\t\tconst pattern=data.readString();\r\n\t\t\t\tconst flags=data.readByte();\r\n\r\n\t\t\t\treturn new RegExp(pattern!,\"g\"+\r\n\t\t\t\t\t((flags&1)?\"i\": \"\")+\r\n\t\t\t\t\t((flags&2)?\"m\": \"\"),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tcase 'E':\r\n\t\t\t\treturn data.readError();\r\n\t\t\tcase 'O':\r\n\t\t\t\tconst objectType=data.readString();\r\n\t\t\t\tif(objectType==null) throw new Error(\"Type can't be null\");\r\n\t\t\t\treturn createRemoteObject(objectType);\r\n\t\t\tcase 'F':\r\n\t\t\t\tconst type=data.readString();\r\n\t\t\t\tif(type==null) throw new Error(\"Type can't be null\");\r\n\t\t\t\tconst method=data.readString();\r\n\t\t\t\tif(method==null) throw new Error(\"Method can't be null\");\r\n\t\t\t\tconst func=new RpcFunction(type,method);\r\n\t\t\t\talready.push(func);\r\n\t\t\t\treturn func;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unknown data type number: \"+objectId);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function writeDynamic(output: DataOutput,d: unknown,already: unknown[]){\r\n\tif(d==null) output.writeLength('n'.charCodeAt(0));\r\n\telse if(d===true) output.writeLength('t'.charCodeAt(0));\r\n\telse if(d===false) output.writeLength('f'.charCodeAt(0));\r\n\telse if(typeof d==\"number\"&&(d|0)===d){\r\n\t\toutput.writeLength('i'.charCodeAt(0));\r\n\t\toutput.writeInt(d);\r\n\t}else if(typeof d==\"number\"){\r\n\t\toutput.writeLength('d'.charCodeAt(0));\r\n\t\toutput.writeDouble(d);\r\n\t}else if(typeof d==\"bigint\"){\r\n\t\toutput.writeLength('l'.charCodeAt(0));\r\n\t\toutput.writeLong(d);\r\n\t}else if(d instanceof Uint8Array){\r\n\t\toutput.writeLength('b'.charCodeAt(0));\r\n\t\toutput.writeLength(d.length);\r\n\t\toutput.writeBuffer(d);\r\n\t}else if(d instanceof Date){\r\n\t\toutput.writeLength('D'.charCodeAt(0));\r\n\t\toutput.writeLong(+d);\r\n\t}else if(d instanceof RegExp){\r\n\t\toutput.writeLength('R'.charCodeAt(0));\r\n\t\toutput.writeString(d.source);\r\n\t\tconst flags=d.flags;\r\n\t\toutput.writeByte(\r\n\t\t\t(flags.includes(\"i\")?1: 0)||\r\n\t\t\t(flags.includes(\"m\")?2: 0),\r\n\t\t);\r\n\t}else if(d instanceof Error){\r\n\t\toutput.writeLength('E'.charCodeAt(0));\r\n\t\toutput.writeError(d);\r\n\t}else if(typeof d===\"object\"&&RpcObjectType in d){//RpcObject\r\n\t\toutput.writeLength('O'.charCodeAt(0));\r\n\t\toutput.writeString((d as any)[RpcObjectType]);\r\n\t}else if(typeof d===\"function\"){//RpcFunction\r\n\t\talready.push(d);\r\n\t\toutput.writeLength('F'.charCodeAt(0));\r\n\t\t\r\n\t\tlet rpcFunc:RpcFunction<any>;\r\n\t\tif(d instanceof RpcFunction)rpcFunc=d;\r\n\t\telse{\r\n\t\t\trpcFunc=registerFunction(d as any);\r\n\t\t\tonFree.set(d,()=>unregisterFunction(rpcFunc));\r\n\t\t}\r\n\r\n\t\toutput.writeString(rpcFunc.type);\r\n\t\toutput.writeString(rpcFunc.method);\r\n\t\t\r\n\t}else if(already.includes(d)){\r\n\t\toutput.writeLength(-(already.indexOf(d)*4/* +0 */));\r\n\t}else if(typeof d===\"string\"){\r\n\t\tconst buffer=new TextEncoder().encode(d);\r\n\t\toutput.writeLength(-(buffer.length*4+1));\r\n\t\toutput.writeBytes(buffer);\r\n\t} else if(Array.isArray(d)){\r\n\t\talready.push(d);\r\n\t\toutput.writeLength(-(d.length*4+3));\r\n\t\tfor(let element of d) writeDynamic(output,element,already);\r\n\t}else{\r\n\t\tfor(let [id,check,write] of writeRegistry){\r\n\t\t\tif(!check(d)) continue;\r\n\t\t\tconst idBytes=new TextEncoder().encode(id);\r\n\t\t\toutput.writeLength(idBytes.length+128);\r\n\t\t\toutput.writeBytes(idBytes);\r\n\t\t\twrite(output,d,already);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(typeof d===\"object\"){\r\n\t\t\talready.push(d);\r\n\t\t\tconst entries=Object.entries(d);\r\n\t\t\toutput.writeLength(-(entries.length*4+2));\r\n\t\t\tfor(let [key,value] of entries){\r\n\t\t\t\toutput.writeString(key);\r\n\t\t\t\twriteDynamic(output,value,already);\r\n\t\t\t}\r\n\t\t}else throw new Error(\"Unknown type for \"+d);\r\n\t}\r\n}\r\n\r\nconst onFree=new WeakMap<any,VoidFunction>();\r\nexport function freeDynamic(already:unknown[]){\r\n\tfor(let element of already)\r\n\t\tonFree.get(element)?.();\r\n}","import {RpcError} from \"../RpcError\";\r\nimport {RpcNameOrId} from \"../../connection/IdAndName\";\r\nimport {writeDynamic} from \"./DynamicData\";\r\n\r\nexport class DataOutput{\r\n\tprivate _buf: Uint8Array;\r\n\tprivate _data: DataView;\r\n\tprivate _count: number=0;\r\n\r\n\tconstructor(size:number|Uint8Array=32){\r\n\t\tthis._buf=typeof size===\"number\"?new Uint8Array(size):size;\r\n\t\tthis._data=new DataView(this._buf.buffer);\r\n\t}\r\n\r\n\tprivate ensureCapacity(additional: number){\r\n\t\tadditional+=this._count;\r\n\t\tif(additional>this._buf.byteLength){\r\n\t\t\tlet replacement=new Uint8Array(Math.max(this._buf.byteLength*2,additional));\r\n\t\t\tthis._data=new DataView(replacement.buffer);\r\n\r\n\t\t\treplacement.set(this._buf);\r\n\t\t\tthis._buf=replacement;\r\n\t\t}\r\n\t}\r\n\r\n\twriteByte(b: number): void{\r\n\t\tthis.ensureCapacity(1);\r\n\t\tthis._buf[this._count]=b;\r\n\t\tthis._count++;\r\n\t}\r\n\r\n\twriteBytes(b: ArrayLike<number>): void{\r\n\t\tthis.ensureCapacity(b.length);\r\n\t\tthis._buf.set(b,this._count);\r\n\t\tthis._count+=b.length;\r\n\t}\r\n\r\n\twriteBuffer(buf:Uint8Array):void{\r\n\t\tthis.writeBytes(buf);\r\n\t}\r\n\r\n\twriteBoolean(b: boolean): void{this.writeByte(b?1: 0);}\r\n\twriteNullBoolean(b: boolean|null): void{this.writeByte(b==null?2:b?1: 0);}\r\n\r\n\twriteShort(n: number): void{\r\n\t\tthis.ensureCapacity(2);\r\n\t\tthis._data.setInt16(this._count,n);\r\n\t\tthis._count+=2;\r\n\t}\r\n\r\n\twriteChar(c: string): void{this.writeShort(c.charCodeAt(0));}\r\n\r\n\twriteInt(n: number): void{\r\n\t\tthis.ensureCapacity(4);\r\n\t\tthis._data.setInt32(this._count,n);\r\n\t\tthis._count+=4;\r\n\t}\r\n\r\n\twriteLong(n: bigint|number): void{\r\n\t\tif(typeof n===\"number\"){\r\n\t\t\tthis.writeInt(n/(2**32));\r\n\t\t\tthis.writeInt(n%(2**32));\r\n\t\t}else{\r\n\t\t\tthis.writeInt(Number(n/BigInt(2**32)));\r\n\t\t\tthis.writeInt(Number(n%BigInt(2**32)));\r\n\t\t}\r\n\t}\r\n\r\n\twriteFloat(n: number): void{\r\n\t\tthis.ensureCapacity(4);\r\n\t\tthis._data.setFloat32(this._count,n);\r\n\t\tthis._count+=4;\r\n\t}\r\n\r\n\twriteDouble(n: number): void{\r\n\t\tthis.ensureCapacity(8);\r\n\t\tthis._data.setFloat64(this._count,n);\r\n\t\tthis._count+=8;\r\n\t}\r\n\r\n\twriteString(s: string|null){\r\n\t\tif(s==null){\r\n\t\t\tthis.writeLength(-1);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet array=new TextEncoder().encode(s);\r\n\t\tthis.writeLength(array.length);\r\n\t\tthis.writeBytes(array);\r\n\t}\r\n\r\n\twriteLength(i: number){\r\n\t\tlet u=(i<0?~i:i)>>>0;// \">>>0\" : convert to unsigned\r\n\t\twhile(u>=0x80){\r\n\t\t\tthis.writeByte(u|0x80);\r\n\t\t\tu>>=7;\r\n\t\t}\r\n\t\tif(i<0){\r\n\t\t\tthis.writeByte(u|0x80);\r\n\t\t\tthis.writeByte(0);\r\n\t\t}else{\r\n\t\t\tthis.writeByte(u);\r\n\t\t}\r\n\t}\r\n\r\n\twriteByteArray(arr: ArrayLike<number>|null){\r\n\t\tif(!arr) this.writeLength(-1);\r\n\t\telse{\r\n\t\t\tthis.writeLength(arr.length);\r\n\t\t\tthis.writeBytes(arr);\r\n\t\t}\r\n\t}\r\n\twriteArray<T>(arr: ArrayLike<T>|null,writeFunction: (t: T)=>void){\r\n\t\tif(!arr) this.writeLength(-1);\r\n\t\telse{\r\n\t\t\tthis.writeLength(arr.length);\r\n\t\t\tfor(let i=0; i<arr.length; i++)\r\n\t\t\t\twriteFunction.call(this,arr[i]!);\r\n\t\t}\r\n\t}\r\n\r\n\ttoBuffer(from=0): Uint8Array{\r\n\t\treturn this._buf.slice(from,this._count-from);\r\n\t}\r\n\r\n\twriteError(error: Error){\r\n\t\tconst remote=error instanceof RpcError?\r\n\t\t\terror:\r\n\t\t\tnew RpcError(error.name,RpcNameOrId,error.message,error.stack!);\r\n\t\tthis.writeString(remote.name);\r\n\t\tthis.writeString(remote.from);\r\n\t\tthis.writeString(remote.message);\r\n\t\tthis.writeString(remote.stackTrace);\r\n\t}\r\n\r\n\twriteDynamic(value: any,already: unknown[]=[]){\r\n\t\twriteDynamic(this,value,already);\r\n\t}\r\n}\r\n","// noinspection ExceptionCaughtLocallyJS\r\n\r\nimport {_webSocket} from \"./WebSocketConnection\";\r\nimport {RpcNameOrId} from \"./IdAndName\";\r\nimport {DataOutput} from \"../types/data/DataOutput\";\r\nimport {DataInput} from \"../types/data/DataInput\";\r\nimport {\r\n\tgetAsyncIterator,\r\n\tPendingCall,\r\n\tregisterReceive,\r\n\trejectCall,\r\n\tresolveCall,\r\n\trunReceiveMessage\r\n} from \"../types/functions/PendingCall\";\r\nimport {invoke,registeredTypes} from \"../internal/RegisteredTypes\";\r\nimport {FunctionCallContext,runWithContext} from \"../types/functions/FunctionCallContext\";\r\nimport {RpcError} from \"../types/RpcError\";\r\nimport {isNodeJs} from \"./RpcId\";\r\nimport {freeDynamic} from \"../types/data/DynamicData\";\r\n\r\n\r\nconst activeRequests=new Map<number,PendingCall>();\r\nconst currentlyExecuting=new Map<number,FunctionCallContext>();\r\n\r\nexport function disposeConnection(e: Error){\r\n\tfor(let pending of activeRequests.values()) rejectCall.get(pending)?.(e);\r\n\tactiveRequests.clear();\r\n\r\n\tfor(let ctx of currentlyExecuting.values()) ctx.cancelSelf();\r\n}\r\n\r\nexport function sendRaw(buff: DataOutput){\r\n\tif(_webSocket==null) throw new Error(\"Not connected\");\r\n\t_webSocket.send(buff.toBuffer());\r\n}\r\n\r\nexport function sendCall(callId: number,call: PendingCall,buff: DataOutput){\r\n\tactiveRequests.set(callId,call);\r\n\ttry{\r\n\t\tsendRaw(buff);\r\n\t}catch(e){\r\n\t\trejectCall.get(call)?.(e as Error);\r\n\t}\r\n}\r\n\r\nexport enum PacketType{\r\n\tFunctionCall=0,\r\n\tFunctionSuccess=1,\r\n\tFunctionError=2,\r\n\tFunctionCancel=3,\r\n\tMessageToExecutor=4,\r\n\tMessageToCaller=5,\r\n}\r\n\r\n//receiving FunctionError results in an Uncaught in promise warning, that doesn't make sense, therefore it gets blocked here\r\nlet ignoreUnhandledRejections=false;\r\nif(isNodeJs) process.on(\"unhandledRejection\",()=>{\r\n\tignoreUnhandledRejections=false;\r\n});\r\nelse window.addEventListener(\"unhandledrejection\",e=>{\r\n\tif(ignoreUnhandledRejections&&e.reason instanceof RpcError){\r\n\t\tignoreUnhandledRejections=false;\r\n\t\te.preventDefault();\r\n\t}\r\n});\r\n\r\nexport async function receiveRpc(data: DataInput){\r\n\ttry{\r\n\t\tconst packetType=data.readByte() as PacketType;\r\n\r\n\t\tswitch(packetType){\r\n\t\t\tcase PacketType.FunctionCall:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\r\n\t\t\t\tconst already: unknown[]=[];\r\n\r\n\t\t\t\tlet finished: boolean=false;\r\n\t\t\t\tlet resolve: (t: unknown)=>void=null!;\r\n\t\t\t\tlet reject: (e: Error)=>void=null!;\r\n\r\n\t\t\t\tconst promise=new Promise((res,rej)=>{\r\n\t\t\t\t\tresolve=t=>{\r\n\t\t\t\t\t\tres(t);\r\n\t\t\t\t\t\tfinished=true;\r\n\r\n\t\t\t\t\t\tconst buff=new DataOutput();\r\n\t\t\t\t\t\tbuff.writeByte(PacketType.FunctionSuccess);\r\n\t\t\t\t\t\tbuff.writeLength(callId);\r\n\t\t\t\t\t\tbuff.writeDynamic(t);\r\n\t\t\t\t\t\tsendRaw(buff);\r\n\t\t\t\t\t\tcurrentlyExecuting.delete(callId);\r\n\r\n\t\t\t\t\t\tfreeDynamic(already);\r\n\t\t\t\t\t};\r\n\t\t\t\t\treject=e=>{\r\n\t\t\t\t\t\trej(e);\r\n\t\t\t\t\t\tfinished=true;\r\n\r\n\t\t\t\t\t\tconst buff=new DataOutput();\r\n\t\t\t\t\t\tbuff.writeByte(PacketType.FunctionError);\r\n\t\t\t\t\t\tbuff.writeLength(callId);\r\n\t\t\t\t\t\tbuff.writeError(e);\r\n\t\t\t\t\t\tsendRaw(buff);\r\n\t\t\t\t\t\tcurrentlyExecuting.delete(callId);\r\n\r\n\t\t\t\t\t\tfreeDynamic(already);\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\ttry{\r\n\t\t\t\t\tconst type=data.readString();\r\n\r\n\t\t\t\t\tif(type==null) throw new Error(\"Client can't use null as a type for function calls\");\r\n\t\t\t\t\tconst local=registeredTypes.get(type);\r\n\t\t\t\t\tif(!local) throw new Error(`Type \"${type}\" is not registered on client ${RpcNameOrId}`);\r\n\r\n\t\t\t\t\tconst method=data.readString();\r\n\r\n\t\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\r\n\r\n\t\t\t\t\tconst controller=new AbortController();\r\n\t\t\t\t\tconst context: FunctionCallContext={\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\tmethod,\r\n\t\t\t\t\t\tget finished(){\r\n\t\t\t\t\t\t\treturn finished;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tpromise,\r\n\t\t\t\t\t\tsendMessage(...sending){\r\n\t\t\t\t\t\t\tif(finished) return context;\r\n\t\t\t\t\t\t\tconst msg=new DataOutput();\r\n\t\t\t\t\t\t\tmsg.writeByte(PacketType.MessageToCaller);\r\n\t\t\t\t\t\t\tmsg.writeLength(callId);\r\n\t\t\t\t\t\t\tconst list: unknown[]=[];\r\n\t\t\t\t\t\t\tmsg.writeArray(sending,d=>msg.writeDynamic(d,list));\r\n\t\t\t\t\t\t\talready.push(...list);\r\n\r\n\t\t\t\t\t\t\tsendRaw(msg);\r\n\t\t\t\t\t\t\treturn context;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\taddMessageListener(func: (...args: any[])=>void){\r\n\t\t\t\t\t\t\tregisterReceive(context,func);\r\n\t\t\t\t\t\t\treturn context;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcancelToken:controller.signal,\r\n\t\t\t\t\t\tcancelSelf:()=>controller.abort(),\r\n\t\t\t\t\t\t[Symbol.asyncIterator]:()=>getAsyncIterator(context),\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcurrentlyExecuting.set(callId,context);\r\n\r\n\r\n\t\t\t\t\tconst result: Promise<any> | any=runWithContext(()=>invoke(local,type,method,...args),context);\r\n\r\n\t\t\t\t\tif(result instanceof Promise) result.then(r=>resolve(r),e=>reject(e));\r\n\t\t\t\t\telse resolve(result);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\treject(e as Error);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionSuccess:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\t\t\t\tconst pending=activeRequests.get(callId);\r\n\t\t\t\tif(pending==null){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no activeRequest with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ttry{\r\n\t\t\t\t\tresolveCall.get(pending)?.(data.readDynamic());\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\trejectCall.get(pending)?.(e as Error);\r\n\t\t\t\t}finally{\r\n\t\t\t\t\tactiveRequests.delete(callId);\r\n\t\t\t\t\tresolveCall.delete(pending);\r\n\t\t\t\t\trejectCall.delete(pending);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionError:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\r\n\t\t\t\tconst pending=activeRequests.get(callId);\r\n\t\t\t\tif(pending==null){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no activeRequest with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry{\r\n\t\t\t\t\tignoreUnhandledRejections=true;\r\n\t\t\t\t\trejectCall.get(pending)?.(data.readError());\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\trejectCall.get(pending)?.(e as Error);\r\n\t\t\t\t}finally{\r\n\t\t\t\t\tactiveRequests.delete(callId);\r\n\t\t\t\t\tresolveCall.delete(pending);\r\n\t\t\t\t\trejectCall.delete(pending);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.FunctionCancel:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet ctx=currentlyExecuting.get(callId);\r\n\t\t\t\tif(!ctx){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no CurrentlyExecuting with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tctx.cancelSelf();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.MessageToExecutor:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet ctx=currentlyExecuting.get(callId);\r\n\t\t\t\tif(!ctx){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no CurrentlyExecuting with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tconst already: unknown[]=[];\r\n\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\t\t\t\trunReceiveMessage(ctx,args);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase PacketType.MessageToCaller:{\r\n\t\t\t\tconst callId=data.readLength();\r\n\t\t\t\tlet pending=activeRequests.get(callId);\r\n\t\t\t\tif(!pending){\r\n\t\t\t\t\tconsole.log(`${RpcNameOrId} has no ActiveRequest with id: ${callId}`);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tconst already: unknown[]=[];\r\n\t\t\t\tconst args=data.readArray(()=>data.readDynamic(already))??[];\r\n\r\n\t\t\t\trunReceiveMessage(pending,args);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}catch(e){\r\n\t\tconsole.error(e);\r\n\t}\r\n}","import {RpcError} from \"../RpcError\";\r\nimport {readDynamic} from \"./DynamicData\";\r\n\r\n\r\nexport class DataInput{\r\n\tprivate readonly _buf: Uint8Array;\r\n\tprivate readonly _data: DataView;\r\n\tprivate _pos: number;\r\n\tprivate readonly _count: number;\r\n\r\n\tconstructor(buf: Uint8Array);\r\n\tconstructor(buf: Uint8Array,pos: number,length: number);\r\n\tconstructor(buf: Uint8Array,pos: number=0,length: number=buf.length){\r\n\t\tthis._buf=buf;\r\n\t\tthis._data=new DataView(buf.buffer);\r\n\t\tthis._pos=pos;\r\n\t\tthis._count=pos+length;\r\n\t}\r\n\r\n\treadFully(b: number[],off: number=0,len: number=b.length): void{\r\n\t\tlet pos=this._pos;\r\n\t\tconst available=this._count-pos;\r\n\r\n\t\tif(available<len) throw new RangeError(\"not enough bytes available to use readFully\");\r\n\r\n\t\tfor(let i=off; i<off+len; i++)\r\n\t\t\tb[i]=this._buf[pos++]!;\r\n\t\tthis._pos=pos;\r\n\t}\r\n\r\n\tskip(n: number): number{\r\n\t\tlet k=this.available();\r\n\t\tif(n<k) k=n<0?0: n;\r\n\t\tthis._pos+=k;\r\n\t\treturn k;\r\n\t}\r\n\r\n\tavailable(): number{\r\n\t\treturn this._count-this._pos;\r\n\t}\r\n\r\n\treadAll(): Uint8Array{\r\n\t\treturn this._buf.slice(this._pos,this._pos=this._count);\r\n\t}\r\n\r\n\treadBuffer(length: number): Uint8Array{\r\n\t\tif(length>this.available()) throw new RangeError();\r\n\t\treturn this._buf.slice(this._pos,this._pos+=length);\r\n\t}\r\n\r\n\treadByte(): number{\r\n\t\treturn this._data.getUint8(this._pos++);\r\n\t}\r\n\r\n\treadBoolean(): boolean{\r\n\t\treturn this.readByte()!=0;\r\n\t}\r\n\r\n\treadNullBoolean(): boolean | null{\r\n\t\tconst b=this.readByte();\r\n\t\treturn b<2?b==1: null;\r\n\t}\r\n\r\n\treadShort(): number{\r\n\t\tconst n=this._data.getInt16(this._pos);\r\n\t\tthis._pos+=2;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadUShort(): number{\r\n\t\tconst n=this._data.getUint16(this._pos);\r\n\t\tthis._pos+=2;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadChar(): string{\r\n\t\treturn String.fromCharCode(this.readUShort());\r\n\t}\r\n\r\n\treadInt(): number{\r\n\t\tconst n=this._data.getInt32(this._pos);\r\n\t\tthis._pos+=4;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadLong(): bigint{\r\n\t\treturn BigInt(this.readInt())*BigInt(2**32)+BigInt(this.readInt()>>>0);\r\n\t}\r\n\r\n\treadFloat(): number{\r\n\t\tconst n=this._data.getFloat32(this._pos);\r\n\t\tthis._pos+=4;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadDouble(): number{\r\n\t\tconst n=this._data.getFloat64(this._pos);\r\n\t\tthis._pos+=8;\r\n\t\treturn n;\r\n\t}\r\n\r\n\treadString(): string|null{\r\n\t\tlet length=this.readLength();\r\n\t\tif(length== -1) return null;\r\n\t\treturn new TextDecoder().decode(this.readBuffer(length));\r\n\t}\r\n\r\n\treadLength(): number{\r\n\t\tlet result=0;\r\n\t\tlet push=0;\r\n\t\twhile(true){\r\n\t\t\tconst read=this.readByte();\r\n\t\t\tif(read==0) return push==0?0: ~result;\r\n\t\t\tif((read&0x80)==0){\r\n\t\t\t\tresult|=read<<push;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\tresult|=(read&0x7f)<<push;\r\n\t\t\tpush+=7;\r\n\t\t}\r\n\t}\r\n\r\n\treadArray<T>(readFunction: ()=>T): T[]|null{\r\n\t\tconst length=this.readLength();\r\n\t\tif(length== -1) return null;\r\n\t\tconst arr: T[]=[];\r\n\t\tfor(let i=0; i<length; i++)\r\n\t\t\tarr[i]=readFunction.call(this);\r\n\t\treturn arr;\r\n\t}\r\n\r\n\treadError(){\r\n\t\treturn new RpcError(this.readString(),this.readString()??\"???\",this.readString(),this.readString());\r\n\t}\r\n\r\n\treadDynamic(already: unknown[]=[]){\r\n\t\treturn readDynamic(this,already);\r\n\t}\r\n}","import {RpcNameOrId} from \"./IdAndName\";\r\nimport {disposeConnection,receiveRpc} from \"./Connection\";\r\nimport {DataInput} from \"../types/data/DataInput\";\r\nimport {callRemoteFunction} from \"../types/functions/FunctionCallContext\";\r\nimport {registeredTypes} from \"../internal/RegisteredTypes\";\r\nimport {isNodeJs} from \"./RpcId\";\r\n\r\n\r\nexport let isConnected=false;\r\n\r\n\r\nlet resolveWaitUntilConnected: VoidFunction,rejectWaitUntilConnected: (e: Error)=>void;\r\nlet waitUntilConnectedAttempt=new Promise<void>((res,rej)=>[resolveWaitUntilConnected,rejectWaitUntilConnected]=[res,rej]);\r\n\r\nexport async function waitConnected(){\r\n\twhile(true)\r\n\t\tif(await waitUntilConnectedAttempt.then(()=>true,()=>false))\r\n\t\t\treturn;\r\n}\r\n\r\n\r\nlet createWebSocket: (query: URLSearchParams)=>Promise<WebSocket>;\r\nif(isNodeJs){\r\n\tconst url=process.env.RPC_URL;\r\n\tif(!url){\r\n\t\tconsole.warn(\"RPC_URL is not defined => RPC will not connect\");\r\n\t\tcreateWebSocket=async()=>({} as any as WebSocket);\r\n\t}else\r\n\t\tcreateWebSocket=async(query)=>{\r\n\t\t\tconst uri=new URL(url);\r\n\t\t\turi.search=query.toString();\r\n\t\t\treturn new (await import(\"ws\")).WebSocket(uri,process.env.RPC_TOKEN==null?{}: {\r\n\t\t\t\theaders:{\r\n\t\t\t\t\tCookie:\"RPC_TOKEN=\"+process.env.RPC_TOKEN,\r\n\t\t\t\t},\r\n\t\t\t}) as unknown as WebSocket;\r\n\t\t};\r\n}else if(\"document\" in globalThis)\r\n\tcreateWebSocket=async(query)=>new WebSocket(\"ws\"+document.location.origin.substring(4)+\"/rpc?\"+query);\r\nelse throw new Error(\"Unknown Platform\");\r\n\r\n\r\nfunction closeRpc(e: Error){\r\n\tconst reject=rejectWaitUntilConnected;\r\n\twaitUntilConnectedAttempt=new Promise<void>((res,rej)=>[resolveWaitUntilConnected,rejectWaitUntilConnected]=[res,rej]);\r\n\treject(e);\r\n\r\n\tdisposeConnection(e);\r\n}\r\n\r\n\r\n//connect\r\n\r\nexport let _webSocket: WebSocket | null=null;\r\n(async function reconnect(){\r\n\tawait Promise.resolve();\r\n\r\n\tlet reportedName=RpcNameOrId;\r\n\tlet reportedTypes=new Set<string>();\r\n\r\n\tconst query=new URLSearchParams();\r\n\tquery.set(\"name\",reportedName);\r\n\tfor(let key of registeredTypes.keys()){\r\n\t\treportedTypes.add(key);\r\n\t\tquery.append(\"type\",key);\r\n\t}\r\n\r\n\r\n\tconst webSocket=await createWebSocket(query);\r\n\r\n\twebSocket.onclose=()=>{\r\n\t\t_webSocket=null;\r\n\t\tisConnected=false;\r\n\t\tconsole.log(\"Websocket disconnected\");\r\n\t\tconst e=new Error(\"Connection closed\");\r\n\t\tcloseRpc(e);\r\n\t\tsetTimeout(reconnect,1000);\r\n\t};\r\n\twebSocket.onopen=async()=>{\r\n\t\tconsole.log(\"Websocket connected\");\r\n\r\n\t\ttry{\r\n\t\t\t_webSocket=webSocket;\r\n\r\n\t\t\tconst toRegister=new Set(registeredTypes.keys());\r\n\t\t\tconst toDelete=new Set(reportedTypes);\r\n\r\n\t\t\tfor(let type of toRegister)\r\n\t\t\t\tif(toDelete.delete(type))\r\n\t\t\t\t\ttoRegister.delete(type);\r\n\r\n\t\t\tif(toRegister.size||toDelete.size)\r\n\t\t\t\tif(RpcNameOrId!=reportedName) await callRemoteFunction(null,'H',RpcNameOrId,[...toRegister.keys()],[...toDelete.keys()]);\r\n\t\t\t\telse await callRemoteFunction(null,'H',[...toRegister.keys()],[...toDelete.keys()]);\r\n\t\t\telse if(RpcNameOrId!=reportedName) await callRemoteFunction(null,'H',RpcNameOrId);\r\n\t\t\t\r\n\r\n\r\n\t\t\tisConnected=true;\r\n\t\t\tresolveWaitUntilConnected();\r\n\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t}catch(e: Error){\r\n\t\t\tconsole.error(e.stack);\r\n\t\t\tcloseRpc(e);\r\n\r\n\t\t\twebSocket?.close(4000,\"Error registering types\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\twebSocket.binaryType=\"arraybuffer\";\r\n\twebSocket.onmessage=function onMessage(e: MessageEvent){\r\n\t\tconst data=e.data;\r\n\r\n\t\tif(typeof data==\"string\"){\r\n\t\t\tconsole.log(data);\r\n\t\t}else{\r\n\t\t\t// noinspection JSIgnoredPromiseFromCall\r\n\t\t\treceiveRpc(new DataInput(new Uint8Array(data)));\r\n\t\t}\r\n\t};\r\n}());\r\n","import {isConnected} from \"./WebSocketConnection\";\r\nimport {callRemoteFunction} from \"../types/functions/FunctionCallContext\";\r\nimport {RpcId} from \"./RpcId\";\r\n\r\n\r\nexport let RpcNameOrId=RpcId;\r\n\r\nexport async function setName(name:string|null){\r\n\tRpcNameOrId=name!=null?`${name} (${RpcId})`: RpcId;\r\n\ttry{\r\n\t\tif(isConnected) await callRemoteFunction(null,'N',RpcNameOrId);\r\n\t}catch(e){\r\n\t\tconsole.error(e);\r\n\t}\r\n}","import {registerType} from \"../internal/RegisteredTypes\";\r\n\r\nexport function RpcProvider(type?: string){\r\n\treturn function(target: any){\r\n\t\tregisterType(type??target.prototype.constructor.name,target).catch(console.error);\r\n\t};\r\n}\r\n","import {DataOutput} from \"./DataOutput\";\r\nimport {DataInput} from \"./DataInput\";\r\nimport {readRegistry,writeRegistry} from \"./DynamicData\";\r\n\r\n\r\ninterface CustomDynamicTypeInstance{\r\n\twrite(outgoing:DataOutput,already:unknown[]):void;\r\n}\r\n\r\ninterface CustomDynamicType<T extends CustomDynamicTypeInstance>{\r\n\tnew(...arg: any[]):T;\r\n\tread(incoming:DataInput,already:unknown[]):CustomDynamicTypeInstance;\r\n}\r\n\r\nexport function CustomDynamicType(id: string){\r\n\treturn function<T extends CustomDynamicTypeInstance>(target: CustomDynamicType<T>){\r\n\t\twriteRegistry.push([id,d=>d instanceof target,(data,o,already)=>(o as T).write(data,already)]);\r\n\t\treadRegistry.set(id,(data,already)=>target.read(data,already));\r\n\t};\r\n}","import {RpcNameOrId,setName} from \"./connection/IdAndName\";\r\nimport {isConnected,waitConnected} from \"./connection/WebSocketConnection\";\r\nimport {createRemoteObject,RPC_ROOT,RpcObjectGetMethods,RpcObjectType} from \"./types/RpcObject\";\r\nimport {registerFunction,RpcFunction,unregisterFunction} from \"./types/RemoteFunction\";\r\nimport {\r\n\tcallLocal,\r\n\tcallRemoteFunction,\r\n\tFunctionCallContext,\r\n\tgetFunctionContext,\r\n} from \"./types/functions/FunctionCallContext\";\r\nimport {registerType,unregisterType} from \"./internal/RegisteredTypes\";\r\nimport {RpcId} from \"./connection/RpcId\";\r\n\r\n\r\nexport * from \"./types/data/DataInput\";\r\nexport * from \"./types/data/DataOutput\";\r\n\r\nexport type {FunctionCallContext} from \"./types/functions/FunctionCallContext\";\r\nexport * from \"./types/functions/PendingCall\";\r\n\r\nexport * from \"./types/RpcObject\";\r\nexport * from \"./types/RemoteFunction\";\r\nexport * from \"./types/RpcError\";\r\nexport {RpcProvider} from \"./types/RpcProviderDecorator\";\r\nexport {CustomDynamicType} from \"./types/data/CustomDynamicTypeDecorator\";\r\n\r\nimport(\"./rpc\").then((m)=>Object.assign(globalThis,m));\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport class Rpc{\r\n\r\n\t//Rpc\r\n\tpublic static readonly id: string=RpcId;\r\n\r\n\tpublic static get nameOrId(): string{return RpcNameOrId;}\r\n\r\n\tpublic static setName(name: string){return setName(name);}\r\n\r\n\t//Connection\t\r\n\tpublic static get isConnected(): boolean{return isConnected;}\r\n\r\n\tpublic static get waitUntilConnected(): Promise<void>{return waitConnected();}\r\n\r\n\t//Functions\r\n\tpublic static createObject=createRemoteObject;\r\n\tpublic static createFunction=<T>(type: string,method: string)=>new RpcFunction<T>(type,method);\r\n\tpublic static registerFunction=registerFunction;\r\n\tpublic static unregisterFunction=unregisterFunction;\r\n\r\n\tpublic static callLocal=callLocal;//Call function and get a PendingCall, this allows the use of the FunctionCallContext within the function\r\n\tpublic static callFunction=callRemoteFunction;//Call remote function\r\n\r\n\tpublic static getContext: ()=>FunctionCallContext=getFunctionContext;\r\n\r\n\t//Types\r\n\tpublic static registerType=registerType;\r\n\tpublic static unregisterType=unregisterType;\r\n\r\n\r\n\tpublic static getObjectWithFallback=async(type: string,...types: string[]): Promise<number>=>await callRemoteFunction(\"Rpc\",\"getObjectWithFallback\",type,...types);\r\n\tpublic static checkTypes=async(...types: string[]): Promise<number>=>await callRemoteFunction(\"Rpc\",\"checkTypes\",...types);\r\n\tpublic static checkType=async(type: string): Promise<boolean>=>await callRemoteFunction(\"Rpc\",\"checkType\",type);\r\n\tpublic static getAllTypes=async(): Promise<string[]>=>await callRemoteFunction(\"Rpc\",\"getAllTypes\");\r\n\tpublic static getAllConnections=async(): Promise<string[]>=>await callRemoteFunction(\"Rpc\",\"getAllConnections\");\r\n\tpublic static getRegistrations=async(): Promise<(Record<string,string[]>)>=>await callRemoteFunction(\"Rpc\",\"getRegistrations\");\r\n\tpublic static eval=async(expression: string): Promise<string>=>await callRemoteFunction(\"Rpc\",\"eval\",expression);\r\n\r\n\tpublic static root=RPC_ROOT;\r\n\tpublic static objectType=RpcObjectType;\r\n\tpublic static getMethods=RpcObjectGetMethods;\r\n}"],"names":["RpcError","type","from","message","stackTrace","isNodeJs","RpcId","registeredFunctions","registeredTypes","registerType","invoker","isConnected","callRemoteFunction","e","unregisterType","getMethods","getter","RpcObjectGetMethods","arr","key","invoke","method","args","func","ignoreCase","s","reference","PendingCall","resolve","reject","resolveCall","t","rejectCall","onrejected","onfinally","onfulfilled","registerReceive","getAsyncIterator","call","pending","requests","finished","request","requestResult","res","pendingMap","listenersMap","pendings","runReceiveMessage","currentContext","runWithContext","context","previous","getFunctionContext","nextId","local","callLocalFunction","already","freeDynamic","buff","DataOutput","callId","PacketType","d","_webSocket","msgArgs","msg","list","sendRaw","sendCall","callLocal","controller","sending","received","promise","RpcFunction","functionCache","registerFunction","id","unregisterFunction","RpcObjectType","createRemoteObject","target","cache","_","p","argArray","RPC_ROOT","prop","writeRegistry","readRegistry","readDynamic","data","objectId","o","i","registryEntry","pattern","flags","objectType","writeDynamic","output","rpcFunc","onFree","buffer","element","check","write","idBytes","entries","value","size","additional","replacement","b","buf","n","c","array","u","writeFunction","error","remote","RpcNameOrId","activeRequests","currentlyExecuting","disposeConnection","ctx","ignoreUnhandledRejections","receiveRpc","rej","result","r","DataInput","pos","length","off","len","k","push","read","readFunction","resolveWaitUntilConnected","rejectWaitUntilConnected","waitUntilConnectedAttempt","waitConnected","createWebSocket","url","query","uri","closeRpc","reconnect","reportedName","reportedTypes","webSocket","toRegister","toDelete","setName","name","RpcProvider","CustomDynamicType","rpc","m","Rpc","types","expression"],"mappings":"AAAO,MAAMA,UAAiB,MAAK;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AAAA,EAEP,YAAYC,GAAkBC,GAAaC,GAAqBC,GAAwC;AAmBvG,IAlBG,OAAOA,KAAY,YACrB,MAAMD,CAAQ,GACd,KAAK,aAAWC,KAETA,KAEP,MAAMD,GAAQ,EAAC,OAAMC,EAAW,CAAA,GAChC,KAAK,aAAW,KAAK,MAAO,UAAU,KAAK,MAAO,QAAQ;AAAA,CAAI,IAAE,CAAC,IAAE;AAAA,eAAgBA,EAAW,UAI9F,MAAMD,CAAO,GACR,KAAA,aAAW,KAAK,MAAO,UAAU,KAAK,MAAO,QAAQ;AAAA,CAAI,IAAE,CAAC,IAElE,KAAK,OAAKF,KAAM,sBAChB,KAAK,OAAKC,GACV,KAAK,QAAM,KAAK,OAAK,MAAIA,IAAK,KAC3BC,KAAS,SAAM,KAAK,SAAO,OAAKA,IAChCC,KAAY,SACf,KAAK,SAAO;AAAA,GAEZ,KAAK,aAAW,KAAK,WAAW,WAAW,UAAS,GAAI,GACxD,KAAK,SAAO,KAAK;AAAA,EAClB;AACD;AC7BO,MAAMC,IAAS,YAAY,SAAS,UAAU,QAAM;AAKhD,IAAAC;AACX,IAAGD;AACC,MAAA;AAII,IAAAC,IAAA,UAAQ,QAAQ,QAAQ,IAAI,EAAE,gBAAc,MAAI,QAAQ;AAAA,EAAA,QACzD;AACL,IAAAA,IAAM,UAAQ,QAAQ,WAAS,MAAI,QAAQ,OAAK,MAAI,QAAQ;AAAA,EAC7D;AAAA,SACQ,cAAc;AAAY,EAAAA,IAAM,SAAO,SAAS,WAAS,MAAI,KAAK,MAAM,SAAS,EAAE,IAAE,MAAI,KAAK,SAAS,SAAS,EAAE,EAAE,UAAU,CAAC;AAAA;AAC7H,QAAA,IAAI,MAAM,kBAAkB;ACN1B,MAAAC,IAAoC,uBAAA,OAAO,IAAI,GAC/CC,wBAAoB;AACjCA,EAAgB,IAAI,MAAIF,GAAMC,CAAmB;AAG3B,eAAAE,GAAaR,GAAaS,GAAgC;AAC5E,MAAA,CAAAF,EAAgB,IAAIP,CAAI,MACXO,EAAA,IAAIP,GAAKS,CAAO,GAE7BC;AACC,QAAA;AACI,YAAAC,EAAmB,MAAK,KAAIX,CAAI;AAAA,aAChCY,GAAE;AACR,cAAQ,IAAIA,CAAC;AAAA,IACd;AACF;AAEA,eAAsBC,GAAeb,GAA4B;AAC7D,MAACO,EAAgB,IAAIP,CAAI,GACzB;AAAA,QAAAU;AACC,UAAA;AACI,cAAAC,EAAmB,MAAK,KAAIX,CAAI;AAAA,eAChC,GAAE;AACR,gBAAQ,IAAI,CAAC;AAAA,MACd;AACD,IAAAO,EAAgB,OAAOP,CAAI;AAAA;AAC5B;AAIA,eAAec,GAAWL,GAAoC;AACvD,QAAAM,IAAON,EAAQO,CAAmB;AACrC,MAAAD;AAAe,WAAA,MAAMA,EAAO,KAAKN,CAAO;AAE3C,QAAMQ,IAAI,CAAA;AACV,WAAQC,KAAOT;AACX,IAAA,OAAOA,EAAQS,CAAG,KAAG,cACvBD,EAAI,KAAKC,CAAG;AAEP,SAAAD;AACR;AAEA,eAAsBE,GAAOV,GAAiBT,GAAaoB,MAAyBC,GAAY;AAC/F,MAAGD,KAAQ,MAAK;AACX,QAAAE,IAAKb,EAAQW,CAAM;AACvB,QAAGE,KAAM,MAAK;AACb,UAAIC,KAAY,MAAMT,GAAWL,CAAO,GAAG,KAAK,CAAGe,MAAAA,EAAE,YAAY,KAAGJ,EAAO,YAAa,CAAA;AACxF,MAAGG,KAAY,SAAMD,IAAKb,EAAQc,CAAU;AAAA,IAC7C;AACM,UAAAE,IAAW,GAAIL,CAAM;AAExB,QAAAE,KAAM,QAAMA,MAAOG;AAAW,YAAM,IAAI,MAAM,WAAYL,CAAM,mBAAqBpB,CAAI,GAAI;AAChG,WAAOsB,EAAK,KAAKb,GAAQ,GAAGY,CAAI;AAAA,EACjC;AAEA,UAAOA,EAAK,UAAQ,IAAE,OAAMA,EAAK,CAAC,GAAE;AAAA,IACnC,KAAK;AACJ,aAAOP,GAAWL,CAAO;AAAA,IAC1B;AACO,YAAA,IAAI,MAAM,mBAAmB;AAAA,EACrC;AACD;ACpEO,MAAMiB,EAA4C;AAAA,EACxD,CAAiB,OAAO,WAAW,IAAU;AAAA,EACtC,WAAS;AAAA,EACA;AAAA,EAEhB,cAAa;AACZ,SAAK,UAAQ,IAAI,QAAQ,CAACC,GAAQC,MAAS;AAC9B,MAAAC,EAAA,IAAI,MAAoB,CAAGC,MAAA;AACtC,QAAAH,EAAQG,CAAC,GACT,KAAK,WAAS;AAAA,MAAA,CACd,GACUC,EAAA,IAAI,MAAoB,CAAGnB,MAAA;AACrC,QAAAgB,EAAOhB,CAAC,GACR,KAAK,WAAS;AAAA,MAAA,CACd;AAAA,IAAA,CACD;AAAA,EACF;AAAA,EAEA,MAAqBoB,GAAwG;AACrH,WAAA,KAAK,QAAQ,MAAMA,CAAU;AAAA,EACrC;AAAA,EAEA,QAAQC,GAAsD;AACtD,WAAA,KAAK,QAAQ,QAAQA,CAAS;AAAA,EACtC;AAAA,EAEA,KAAgCC,GAAkFF,GAAkH;AACnO,WAAO,KAAK,QAAQ,KAAKE,GAAYF,CAAU;AAAA,EAChD;AAAA;AAAA,EAGA,eAAeX,GAA2B;AAClC,WAAA;AAAA,EACR;AAAA,EAEA,mBAA6CC,GAA2C;AACvF,WAAAa,EAAgB,MAAKb,CAA8B,GAC5C;AAAA,EACR;AAAA,EAEA,SAAQ;AAAA,EAAC;AAAA;AAAA,EAET,CAAC,OAAO,aAAa,IAAyB;AAC7C,WAAOc,EAAiB,IAAI;AAAA,EAC7B;AACD;AAEO,SAASA,EAAiBC,GAAkE;AAClG,MAAIC,IAAoB,CAAA,GACpBC,IAAiD,CAAA,GACjDC,IAASH,EAAK;AAEb,SAAAA,EAAA,QAAQ,QAAQ,MAAI;AACf,IAAAG,IAAA;AACT,aAAQC,KAAWF;AAAU,MAAAE,EAAQ,MAAS;AAAA,EAAA,CAC9C,GACDJ,EAAK,mBAAmB,IAAIhB,MAAOiB,EAAQ,KAAKjB,CAAI,CAAC,GAE9C;AAAA,IACN,MAAM,OAA0C;AAC/C,UAAGmB,KAAUH,EAAK;AAAS,eAAM,EAAC,MAAK,IAAK,OAAM,OAAS;AAC3D,UAAGC,EAAQ;AAAO,eAAO,EAAC,MAAK,IAAM,OAAMA,EAAQ;AAE7C,YAAAI,IAAc,MAAM,IAAI,QAA+B,OAAKH,EAAS,KAAKI,CAAG,CAAC;AACpF,aAAGD,KAAe,OAAa,EAAC,MAAK,IAAK,OAAM,OAAS,IAClD,EAAC,MAAK,IAAM,OAAMA,EAAc,CAAC;IACzC;AAAA,EAAA;AAEF;AAEa,MAAAb,wBAAgB,QAAiC,GACjDE,wBAAe,QAAmC,GAClDa,wBAAe,QAAqD,GACpEC,wBAAiB,QAAsE;AAEpF,SAAAV,EAAgBE,GAAwCf,GAA6B;AACjG,MAAAuB,EAAa,IAAIR,CAAI;AACvB,IAAAQ,EAAa,IAAIR,CAAI,EAAG,KAAKf,CAAI;AAAA,OAC7B;AACJ,IAAAuB,EAAa,IAAIR,GAAK,CAACf,CAAI,CAAC;AAC5B,UAAMwB,IAASF,EAAW,IAAIP,CAAI,KAAG,CAAA;AACrC,aAAQC,KAAWQ;AACf,UAAA;AACF,QAAAxB,EAAK,GAAGgB,CAAO;AAAA,eACT1B,GAAE;AACA,gBAAA,KAAK,6BAA4BA,CAAC;AAAA,MAC3C;AAAA,EAEF;AACD;AAEgB,SAAAmC,EAAkBV,GAAwChB,GAAY;AACrF,MAAG,CAAAgB,EAAK;AAEL,QAAAQ,EAAa,IAAIR,CAAI;AACvB,eAAQf,KAAQuB,EAAa,IAAIR,CAAI;AACjC,YAAA;AACF,UAAAf,EAAK,GAAGD,CAAI;AAAA,iBACNT,GAAE;AACA,kBAAA,KAAK,qBAAoBA,CAAC;AAAA,QACnC;AAAA;AAEO,MAAAgC,EAAW,IAAIP,CAAI,IAChBO,EAAA,IAAIP,GAAK,CAAC,GAAGO,EAAW,IAAIP,CAAI,GAAGhB,CAAI,CAAC,IAEnDuB,EAAW,IAAIP,GAAK,CAAChB,CAAI,CAAC;AAE5B;ACvGA,IAAI2B,IAA2C;AAE/B,SAAAC,GAAkB3B,GAAY4B,GAAgC;AAC7E,QAAMC,IAAqCH;AAC5B,EAAAA,IAAAE;AACZ,MAAA;AACF,WAAO5B,EAAK;AAAA,EAAA,UACZ;AACe,IAAA0B,IAAAG;AAAA,EAChB;AACD;AAEO,SAASC,KAAyC;AACxD,MAAGJ,KAAgB;AAAY,UAAA,IAAI,MAAM,mCAAmC;AACrE,SAAAA;AACR;AAGA,IAAIK,KAAO;AAEK,SAAA1C,EAA8BX,GAAoBoB,MAAuBC,GAA4B;AACpH,MAAGrB,KAAM,MAAK;AACP,UAAAsD,IAAM/C,EAAgB,IAAIP,CAAI;AACjC,QAAAsD;AAAc,aAAAC,GAAkBvD,GAAKoB,GAAO,MAAID,GAAOmC,GAAMtD,GAAKoB,GAAO,GAAGC,CAAI,CAAC;AAAA,EACrF;AAEM,QAAAgB,IAAK,IAAIX,KAET8B,IAAmB,CAAA;AACzB,EAAAnB,EAAK,QAAQ,MAAIoB,EAAYD,CAAO,CAAC;AAE/B,QAAAE,IAAK,IAAIC,KACTC,IAAOP;AACV,MAAA;AACG,IAAAK,EAAA,UAAUG,EAAW,YAAY,GACtCH,EAAK,YAAYE,CAAM,GACvBF,EAAK,YAAY1D,CAAI,GACrB0D,EAAK,YAAYtC,CAAM,GACvBsC,EAAK,WAAWrC,GAAK,CAAAyC,MAAGJ,EAAK,aAAaI,GAAEN,CAAO,CAAC;AAAA,WAC9C5C,GAAE;AACG,WAAAmB,EAAA,IAAIM,CAAI,IAAIzB,CAAU,GAC1ByB;AAAA,EACR;AAEA,SAAK3B,KAAcV,KAAM,QAAM+D,KAAY,QAItC1B,EAAA,cAAY,IAAI2B,MAAU;AAC9B,QAAG3B,EAAK;AAAiB,aAAAA;AACnB,UAAA4B,IAAI,IAAIN;AACV,IAAAM,EAAA,UAAUJ,EAAW,iBAAiB,GAC1CI,EAAI,YAAYL,CAAM;AACtB,UAAMM,IAAgB,CAAA;AACtB,WAAAD,EAAI,WAAWD,GAAQ,CAAAF,MAAGG,EAAI,aAAaH,GAAEI,CAAI,CAAC,GAC1CV,EAAA,KAAK,GAAGU,CAAI,GAEpBC,EAAQF,CAAG,GACJ5B;AAAA,EAAA,GAERA,EAAK,SAAO,MAAI;AACf,QAAGA,EAAK;AAAU;AACZ,UAAA4B,IAAI,IAAIN;AACV,IAAAM,EAAA,UAAUJ,EAAW,cAAc,GACvCI,EAAI,YAAYL,CAAM,GAEtBO,EAAQF,CAAG;AAAA,EAAA,GAGHG,GAAAR,GAAOvB,GAAKqB,CAAI,GAElBrB,MA1BNN,EAAW,IAAIM,CAAI,IAAI,IAAI,MAAM,eAAe,CAAC,GAC1CA;AA0BT;AAGO,SAASgC,GAAa/C,GAAwC;AAC7D,SAAAiC,GAAkB,MAAK,MAAKjC,CAAI;AACxC;AAEA,SAASiC,GAAqBvD,GAAkBoB,GAAoBE,GAAwB;AACrF,QAAAe,IAAK,IAAIX,KAET4C,IAAW,IAAI,mBACfpB,IAA6B;AAAA,IAClC,MAAAlD;AAAA,IACA,QAAAoB;AAAA,IACA,aAAY,IAAImD,OACVlC,EAAA,YAAUU,EAAkBV,GAAKkC,CAAO,GACtCrB;AAAA,IAER,IAAI,WAAU;AAAC,aAAOb,EAAK;AAAA,IAAQ;AAAA,IACnC,SAAQA;AAAA,IACR,oBAAmB,CAACf,OACnBa,EAAgBe,GAAQ5B,CAAI,GACrB4B;AAAA,IAER,aAAYoB,EAAW;AAAA,IACvB,YAAW,MAAIA,EAAW,MAAM;AAAA,IAChC,CAAC,OAAO,aAAa,GAAE,MAAIlC,EAAiBc,CAAO;AAAA,EAAA;AAE/C,EAAAb,EAAA,cAAY,IAAImC,OACfnC,EAAA,YAAUU,EAAkBG,GAAQsB,CAAQ,GAC1CnC,IAERA,EAAK,SAAO,MAAIA,EAAK,YAAUa,EAAQ;AAEpC,MAAA;AACI,UAAAuB,IAAwBxB,GAAe3B,GAAK4B,CAAO;AAEzD,IAAGuB,aAAmB,UAASA,EAAQ,KAAK,CAAA3C,MAAGD,EAAY,IAAIQ,CAAI,IAAIP,CAAC,GAAE,CAAAlB,MAAGmB,EAAW,IAAIM,CAAI,IAAIzB,CAAC,CAAC,IACrFiB,EAAA,IAAIQ,CAAI,IAAIoC,CAAO;AAAA,WAC9B7D,GAAE;AACG,IAAAmB,EAAA,IAAIM,CAAI,IAAIzB,CAAU;AAAA,EAClC;AACO,SAAAyB;AACR;AC/GO,MAAMqC,IAAY,cACf,SAAoBpD,GAAe;AAAC,SAAO,OAAO,eAAeA,GAAK,WAAW,SAAS;AAAE,EAKjF;AAAA,EAEpB,YACiBtB,GACAoB,GAChB;AAAC,UAAMT,EAAmB,KAAK,MAAKX,GAAKoB,CAAM,CAAC,GAFhC,KAAA,OAAApB,GACA,KAAA,SAAAoB;AAAA,EACkC;AAAA,EAGnD,WAAU;AACT,WAAO,sBAAsB,KAAK,QAAM,MAAM,IAAI,KAAK,MAAM;AAAA,EAC9D;AACD;AAEA,IAAIiC,KAAe,KAAK;AACxB,MAAMsB,wBAAkB;AAEjB,SAASC,EAAkDtD,GAAwB;AACzF,MAAGA,aAAgBoD;AAAoB,WAAApD;AACjC,QAAAkC,IAAQmB,EAAc,IAAIrD,CAAI;AACpC,MAAGkC,KAAS;AAAK,WAAO,IAAIkB,EAAY,MAAIrE,GAAMmD,CAAO;AACnD,QAAAqB,KAAIxB,MAAU,SAAS,EAAE;AAE/B,EAAA/C,EAAoBuE,CAAE,IAAEvD,GACVqD,EAAA,IAAIrD,GAAKuD,CAAE;AAEzB,QAAM7E,IAAK,MAAIK;AACR,SAAA,IAAIqE,EAAY1E,GAAK6E,CAAE;AAC/B;AAEO,SAASC,EAAmBxD,GAAuB;AACzD,QAAMtB,IAAK,MAAIK;AACf,MAAGiB,EAAK,QAAMtB;AAAY,UAAA,IAAI,MAAM,kEAAkE;AAE/F,SAAAM,EAAoBgB,EAAK,MAAM,GACtCqD,EAAc,OAAOrD,CAAI;AAC1B;AClDa,MAAAyD,IAAc,OAAO,eAAe,GACpC/D,IAAoB,OAAO,qBAAqB;AAkBtD,SAASgE,EAIfhF,GACAiF,IAAU,IAAI,MAAe;AAAA,EAAC,CAACF,CAAa,IAAE/E;AAAI,KACzB;AAEnB,QAAAkF,wBAAU;AAGT,SAAA,IAAI,MAAoCD,GAAO;AAAA,IACrD,IAAIE,GAASC,GAAwB;AACpC,UAAGA,KAAGL;AAAsB,eAAA/E;AAC5B,UAAGoF,KAAGpE;AAAqB,eAAO,MAAIL,EAAmBX,GAAK,MAAK,GAAG;AACnE,UAAA,OAAOoF,KAAG,YACZA,KAAG;AACF,eAAaH,EAAQG,CAAC;AACrB,UAAAF,EAAM,IAAIE,CAAC;AAAU,eAAAF,EAAM,IAAIE,CAAC;AAEnC,YAAM9D,IAAK,IAAIoD;AAAA,QACd1E;AAAA,QACAoF;AAAA,MAAA;AACK,aAAAF,EAAA,IAAIE,GAAE9D,CAAI,GACTA;AAAA,IACR;AAAA,IACA,UAAU2D,GAAYI,GAAwB;AACtC,aAAA,IAAIJ,EAAO,GAAGI,CAAQ;AAAA,IAC9B;AAAA,IACA,IAAIF,GAAQC,GAA4B;AACvC,aAAOA,KAAGL,KAAeK,KAAGpE,KAAqBoE,KAAKH;AAAA,IACvD;AAAA,EAAA,CACA;AACF;AAGO,MAAMK,KAAS,IAAI,MAAM,IAAG;AAAA,EAClC,KAAI,CAACH,GAAEI,MAAO,OAAOA,KAAM,WAASP,EAAmBO,CAAI,IAAE;AAAA,EAC7D,KAAI,CAACJ,GAAEI,MAAO,OAAOA,KAAM,YAAUA,KAAM;AAC5C,CAAC,GCxDYC,KAAyH,CAAA,GACzHC,yBAAiB;AAEd,SAAAC,EAAYC,GAAgBnC,GAAmB;AAC1D,MAAAoC,IAASD,EAAK;AAElB,MAAGC,IAAS,GAAE;AAEb,YADAA,IAAU,CAACA,GACJA,IAAS,GAAE;AAAA,MACjB,KAAK;AACG,eAAApC,EAAQoC,IAAS,CAAC;AAAA,MAC1B,KAAK;AACG,eAAA,IAAI,cAAc,OAAOD,EAAK,YAAYC,IAAS,KAAG,CAAC,CAAC;AAAA,MAChE,KAAK,GAAE;AACN,cAAMC,IAAsB,CAAA;AAC5B,QAAArC,EAAQ,KAAKqC,CAAC;AACd,iBAAQC,IAAE,GAAGA,KAAGF,IAAS,KAAG,GAAGE,KAAI;AAC5B,gBAAA5E,IAAIyE,EAAK;AACf,UAAAE,EAAE3E,CAAI,IAAEwE,EAAYC,GAAKnC,CAAO;AAAA,QACjC;AACO,eAAAqC;AAAA,MACR;AAAA,MACA,KAAK,GAAE;AACN,cAAMA,IAAE,IAAI,OAAOD,IAAS,KAAG,CAAC;AAChC,QAAApC,EAAQ,KAAKqC,CAAC;AACd,iBAAQC,IAAE,GAAGA,IAAED,EAAE,QAAQC;AAAK,UAAAD,EAAEC,CAAC,IAAEJ,EAAYC,GAAKnC,CAAO;AACpD,eAAAqC;AAAA,MACR;AAAA,IACD;AACM,UAAA,IAAI,MAAM,0BAA0B;AAAA,EAAA,WAClCD,KAAU,KAAI;AAChB,UAAA5F,IAAK,IAAI,YAAY,EAAE,OAAO2F,EAAK,WAAWC,IAAS,GAAG,CAAC,GAC3DG,IAAcN,GAAa,IAAIzF,CAAI;AACtC,QAAA+F;AACK,aAAAA,EAAcJ,GAAKnC,CAAO;AAC5B,UAAA,IAAI,MAAM,wBAAsBxD,CAAI;AAAA,EAAA;AAEnC,YAAA,OAAO,cAAc4F,CAAQ,GAAE;AAAA,MACrC,KAAK;AACG,eAAA;AAAA,MACR,KAAK;AACG,eAAA;AAAA,MACR,KAAK;AACG,eAAA;AAAA,MACR,KAAK;AACJ,eAAOD,EAAK;MACb,KAAK;AACJ,eAAOA,EAAK;MACb,KAAK;AACJ,eAAOA,EAAK;MACb,KAAK;AACJ,eAAOA,EAAK,WAAWA,EAAK,WAAY,CAAA;AAAA,MACzC,KAAK;AACJ,eAAO,IAAI,KAAK,OAAOA,EAAK,SAAA,CAAU,CAAC;AAAA,MACxC,KAAK,KAAI;AACF,cAAAK,IAAQL,EAAK,cACbM,IAAMN,EAAK;AAEjB,eAAO,IAAI;AAAA,UAAOK;AAAA,UAAS,OACxBC,IAAM,IAAG,MAAK,OACdA,IAAM,IAAG,MAAK;AAAA,QAAA;AAAA,MAElB;AAAA,MACA,KAAK;AACJ,eAAON,EAAK;MACb,KAAK;AACE,cAAAO,IAAWP,EAAK;AACtB,YAAGO,KAAY;AAAY,gBAAA,IAAI,MAAM,oBAAoB;AACzD,eAAOlB,EAAmBkB,CAAU;AAAA,MACrC,KAAK;AACE,cAAAlG,IAAK2F,EAAK;AAChB,YAAG3F,KAAM;AAAY,gBAAA,IAAI,MAAM,oBAAoB;AAC7C,cAAAoB,IAAOuE,EAAK;AAClB,YAAGvE,KAAQ;AAAY,gBAAA,IAAI,MAAM,sBAAsB;AACvD,cAAME,IAAK,IAAIoD,EAAY1E,GAAKoB,CAAM;AACtC,eAAAoC,EAAQ,KAAKlC,CAAI,GACVA;AAAA,MACR;AACO,cAAA,IAAI,MAAM,+BAA6BsE,CAAQ;AAAA,IACvD;AAEF;AAEgB,SAAAO,EAAaC,GAAmBtC,GAAWN,GAAmB;AAC7E,MAAGM,KAAG;AAAM,IAAAsC,EAAO,YAAY,GAAiB;AAAA,WACxCtC,MAAI;AAAM,IAAAsC,EAAO,YAAY,GAAiB;AAAA,WAC9CtC,MAAI;AAAO,IAAAsC,EAAO,YAAY,GAAiB;AAAA,WAC/C,OAAOtC,KAAG,aAAWA,IAAE,OAAKA;AACnC,IAAAsC,EAAO,YAAY,GAAiB,GACpCA,EAAO,SAAStC,CAAC;AAAA,WACT,OAAOA,KAAG;AAClB,IAAAsC,EAAO,YAAY,GAAiB,GACpCA,EAAO,YAAYtC,CAAC;AAAA,WACZ,OAAOA,KAAG;AAClB,IAAAsC,EAAO,YAAY,GAAiB,GACpCA,EAAO,UAAUtC,CAAC;AAAA,WACVA,aAAa;AACrB,IAAAsC,EAAO,YAAY,EAAiB,GAC7BA,EAAA,YAAYtC,EAAE,MAAM,GAC3BsC,EAAO,YAAYtC,CAAC;AAAA,WACZA,aAAa;AACrB,IAAAsC,EAAO,YAAY,EAAiB,GAC7BA,EAAA,UAAU,CAACtC,CAAC;AAAA,WACXA,aAAa,QAAO;AAC5B,IAAAsC,EAAO,YAAY,EAAiB,GAC7BA,EAAA,YAAYtC,EAAE,MAAM;AAC3B,UAAMmC,IAAMnC,EAAE;AACP,IAAAsC,EAAA;AAAA,OACLH,EAAM,SAAS,GAAG,IAAE,IAAG,OACvBA,EAAM,SAAS,GAAG,IAAE,IAAG;AAAA,IAAA;AAAA,EACzB,WACQnC,aAAa;AACrB,IAAAsC,EAAO,YAAY,EAAiB,GACpCA,EAAO,WAAWtC,CAAC;AAAA,WACX,OAAOA,KAAI,YAAUiB,KAAiBjB;AAC9C,IAAAsC,EAAO,YAAY,EAAiB,GAC7BA,EAAA,YAAatC,EAAUiB,CAAa,CAAC;AAAA,WACpC,OAAOjB,KAAI,YAAW;AAC9B,IAAAN,EAAQ,KAAKM,CAAC,GACdsC,EAAO,YAAY,EAAiB;AAEhC,QAAAC;AACJ,IAAGvC,aAAaY,IAAoB2B,IAAAvC,KAEnCuC,IAAQzB,EAAiBd,CAAQ,GACjCwC,GAAO,IAAIxC,GAAE,MAAIgB,EAAmBuB,CAAO,CAAC,IAGtCD,EAAA,YAAYC,EAAQ,IAAI,GACxBD,EAAA,YAAYC,EAAQ,MAAM;AAAA,EAEzB,WAAA7C,EAAQ,SAASM,CAAC;AAC1B,IAAAsC,EAAO,YAAY,EAAE5C,EAAQ,QAAQM,CAAC,IAAE,EAAU;AAAA,WAC1C,OAAOA,KAAI,UAAS;AAC5B,UAAMyC,IAAO,IAAI,YAAY,EAAE,OAAOzC,CAAC;AACvC,IAAAsC,EAAO,YAAY,EAAEG,EAAO,SAAO,IAAE,EAAE,GACvCH,EAAO,WAAWG,CAAM;AAAA,EACf,WAAA,MAAM,QAAQzC,CAAC,GAAE;AAC1B,IAAAN,EAAQ,KAAKM,CAAC,GACdsC,EAAO,YAAY,EAAEtC,EAAE,SAAO,IAAE,EAAE;AAClC,aAAQ0C,KAAW1C;AAAgB,MAAAqC,EAAAC,GAAOI,GAAQhD,CAAO;AAAA,EAAA,OACrD;AACJ,aAAQ,CAACqB,GAAG4B,GAAMC,CAAK,KAAKlB,IAAc;AACtC,UAAA,CAACiB,EAAM3C,CAAC;AAAG;AACd,YAAM6C,IAAQ,IAAI,YAAY,EAAE,OAAO9B,CAAE;AAClC,MAAAuB,EAAA,YAAYO,EAAQ,SAAO,GAAG,GACrCP,EAAO,WAAWO,CAAO,GACnBD,EAAAN,GAAOtC,GAAEN,CAAO;AACtB;AAAA,IACD;AAEG,QAAA,OAAOM,KAAI,UAAS;AACtB,MAAAN,EAAQ,KAAKM,CAAC;AACR,YAAA8C,IAAQ,OAAO,QAAQ9C,CAAC;AAC9B,MAAAsC,EAAO,YAAY,EAAEQ,EAAQ,SAAO,IAAE,EAAE;AACxC,eAAQ,CAAC1F,GAAI2F,CAAK,KAAKD;AACtB,QAAAR,EAAO,YAAYlF,CAAG,GACTiF,EAAAC,GAAOS,GAAMrD,CAAO;AAAA,IAEnC;AAAY,YAAA,IAAI,MAAM,sBAAoBM,CAAC;AAAA,EAC5C;AACD;AAEA,MAAMwC,yBAAW;AACV,SAAS7C,EAAYD,GAAkB;AAC7C,WAAQgD,KAAWhD;AACX,IAAA8C,GAAA,IAAIE,CAAO;AACpB;ACxKO,MAAM7C,EAAU;AAAA,EACd;AAAA,EACA;AAAA,EACA,SAAe;AAAA,EAEvB,YAAYmD,IAAuB,IAAG;AACrC,SAAK,OAAK,OAAOA,KAAO,WAAS,IAAI,WAAWA,CAAI,IAAEA,GACtD,KAAK,QAAM,IAAI,SAAS,KAAK,KAAK,MAAM;AAAA,EACzC;AAAA,EAEQ,eAAeC,GAAmB;AAEtC,QADHA,KAAY,KAAK,QACdA,IAAW,KAAK,KAAK,YAAW;AAC9B,UAAAC,IAAY,IAAI,WAAW,KAAK,IAAI,KAAK,KAAK,aAAW,GAAED,CAAU,CAAC;AAC1E,WAAK,QAAM,IAAI,SAASC,EAAY,MAAM,GAE9BA,EAAA,IAAI,KAAK,IAAI,GACzB,KAAK,OAAKA;AAAA,IACX;AAAA,EACD;AAAA,EAEA,UAAUC,GAAgB;AACzB,SAAK,eAAe,CAAC,GAChB,KAAA,KAAK,KAAK,MAAM,IAAEA,GAClB,KAAA;AAAA,EACN;AAAA,EAEA,WAAWA,GAA2B;AAChC,SAAA,eAAeA,EAAE,MAAM,GAC5B,KAAK,KAAK,IAAIA,GAAE,KAAK,MAAM,GAC3B,KAAK,UAAQA,EAAE;AAAA,EAChB;AAAA,EAEA,YAAYC,GAAoB;AAC/B,SAAK,WAAWA,CAAG;AAAA,EACpB;AAAA,EAEA,aAAaD,GAAiB;AAAM,SAAA,UAAUA,IAAE,IAAG,CAAC;AAAA,EAAE;AAAA,EACtD,iBAAiBA,GAAsB;AAAC,SAAK,UAAUA,KAAG,OAAK,IAAEA,IAAE,IAAG,CAAC;AAAA,EAAE;AAAA,EAEzE,WAAWE,GAAgB;AAC1B,SAAK,eAAe,CAAC,GACrB,KAAK,MAAM,SAAS,KAAK,QAAOA,CAAC,GACjC,KAAK,UAAQ;AAAA,EACd;AAAA,EAEA,UAAUC,GAAgB;AAAC,SAAK,WAAWA,EAAE,WAAW,CAAC,CAAC;AAAA,EAAE;AAAA,EAE5D,SAASD,GAAgB;AACxB,SAAK,eAAe,CAAC,GACrB,KAAK,MAAM,SAAS,KAAK,QAAOA,CAAC,GACjC,KAAK,UAAQ;AAAA,EACd;AAAA,EAEA,UAAUA,GAAuB;AAC7B,IAAA,OAAOA,KAAI,YACR,KAAA,SAASA,IAAG,KAAG,EAAG,GAClB,KAAA,SAASA,IAAG,KAAG,EAAG,MAEvB,KAAK,SAAS,OAAOA,IAAE,OAAO,KAAG,EAAE,CAAC,CAAC,GACrC,KAAK,SAAS,OAAOA,IAAE,OAAO,KAAG,EAAE,CAAC,CAAC;AAAA,EAEvC;AAAA,EAEA,WAAWA,GAAgB;AAC1B,SAAK,eAAe,CAAC,GACrB,KAAK,MAAM,WAAW,KAAK,QAAOA,CAAC,GACnC,KAAK,UAAQ;AAAA,EACd;AAAA,EAEA,YAAYA,GAAgB;AAC3B,SAAK,eAAe,CAAC,GACrB,KAAK,MAAM,WAAW,KAAK,QAAOA,CAAC,GACnC,KAAK,UAAQ;AAAA,EACd;AAAA,EAEA,YAAY3F,GAAe;AAC1B,QAAGA,KAAG,MAAK;AACV,WAAK,YAAY,EAAE;AACnB;AAAA,IACD;AACA,QAAI6F,IAAM,IAAI,YAAY,EAAE,OAAO7F,CAAC;AAC/B,SAAA,YAAY6F,EAAM,MAAM,GAC7B,KAAK,WAAWA,CAAK;AAAA,EACtB;AAAA,EAEA,YAAYvB,GAAU;AACrB,QAAIwB,KAAGxB,IAAE,IAAE,CAACA,IAAEA,OAAK;AACnB,WAAMwB,KAAG;AACH,WAAA,UAAUA,IAAE,GAAI,GACjBA,MAAA;AAEL,IAAGxB,IAAE,KACC,KAAA,UAAUwB,IAAE,GAAI,GACrB,KAAK,UAAU,CAAC,KAEhB,KAAK,UAAUA,CAAC;AAAA,EAElB;AAAA,EAEA,eAAerG,GAA4B;AAC1C,IAAIA,KAEE,KAAA,YAAYA,EAAI,MAAM,GAC3B,KAAK,WAAWA,CAAG,KAHX,KAAK,YAAY,EAAE;AAAA,EAK7B;AAAA,EACA,WAAcA,GAAuBsG,GAA4B;AAChE,QAAG,CAACtG;AAAK,WAAK,YAAY,EAAE;AAAA,SACxB;AACE,WAAA,YAAYA,EAAI,MAAM;AAC3B,eAAQ6E,IAAE,GAAGA,IAAE7E,EAAI,QAAQ6E;AAC1B,QAAAyB,EAAc,KAAK,MAAKtG,EAAI6E,CAAC,CAAE;AAAA,IACjC;AAAA,EACD;AAAA,EAEA,SAAS7F,IAAK,GAAc;AAC3B,WAAO,KAAK,KAAK,MAAMA,GAAK,KAAK,SAAOA,CAAI;AAAA,EAC7C;AAAA,EAEA,WAAWuH,GAAa;AACvB,UAAMC,IAAOD,aAAiBzH,IAC7ByH,IACA,IAAIzH,EAASyH,EAAM,MAAKE,GAAYF,EAAM,SAAQA,EAAM,KAAM;AAC1D,SAAA,YAAYC,EAAO,IAAI,GACvB,KAAA,YAAYA,EAAO,IAAI,GACvB,KAAA,YAAYA,EAAO,OAAO,GAC1B,KAAA,YAAYA,EAAO,UAAU;AAAA,EACnC;AAAA,EAEA,aAAaZ,GAAWrD,IAAmB,IAAG;AAChC,IAAA2C,EAAA,MAAKU,GAAMrD,CAAO;AAAA,EAChC;AACD;ACpHA,MAAMmE,wBAAmB,OACnBC,wBAAuB;AAEtB,SAASC,GAAkBjH,GAAS;AAClC,WAAA0B,KAAWqF,EAAe,OAAO;AAAc,IAAA5F,EAAA,IAAIO,CAAO,IAAI1B,CAAC;AACvE,EAAA+G,EAAe,MAAM;AAEb,WAAAG,KAAOF,EAAmB,OAAO;AAAG,IAAAE,EAAI,WAAW;AAC5D;AAEO,SAAS3D,EAAQT,GAAiB;AACxC,MAAGK,KAAY;AAAY,UAAA,IAAI,MAAM,eAAe;AACzC,EAAAA,EAAA,KAAKL,EAAK,SAAU,CAAA;AAChC;AAEgB,SAAAU,GAASR,GAAevB,GAAkBqB,GAAiB;AAC3D,EAAAiE,EAAA,IAAI/D,GAAOvB,CAAI;AAC3B,MAAA;AACF,IAAA8B,EAAQT,CAAI;AAAA,WACN9C,GAAE;AACG,IAAAmB,EAAA,IAAIM,CAAI,IAAIzB,CAAU;AAAA,EAClC;AACD;AAEY,IAAAiD,sBAAAA,OACXA,EAAAA,EAAA,eAAa,CAAb,IAAA,gBACAA,EAAAA,EAAA,kBAAgB,CAAhB,IAAA,mBACAA,EAAAA,EAAA,gBAAc,CAAd,IAAA,iBACAA,EAAAA,EAAA,iBAAe,CAAf,IAAA,kBACAA,EAAAA,EAAA,oBAAkB,CAAlB,IAAA,qBACAA,EAAAA,EAAA,kBAAgB,CAAhB,IAAA,mBANWA,IAAAA,KAAA,CAAA,CAAA;AAUZ,IAAIkE,IAA0B;AAC3B3H,IAAkB,QAAA,GAAG,sBAAqB,MAAI;AACtB,EAAA2H,IAAA;AAAA,CAC1B,IACW,OAAA,iBAAiB,sBAAqB,CAAGnH,MAAA;AACjD,EAAAmH,KAA2BnH,EAAE,kBAAkBb,MACvBgI,IAAA,IAC1BnH,EAAE,eAAe;AAClB,CACA;AAED,eAAsBoH,GAAWrC,GAAgB;AAC7C,MAAA;AAGF,YAFiBA,EAAK,YAEJ;AAAA,MACjB,KAAK,GAAwB;AACtB,cAAA/B,IAAO+B,EAAK,cAGZnC,IAAmB,CAAA;AAEzB,YAAIhB,IAAkB,IAClBb,IAA4B,MAC5BC,IAAyB;AAE7B,cAAM6C,IAAQ,IAAI,QAAQ,CAAC9B,GAAIsF,MAAM;AACpC,UAAAtG,IAAQ,CAAGG,MAAA;AACV,YAAAa,EAAIb,CAAC,GACIU,IAAA;AAEH,kBAAAkB,IAAK,IAAIC;AACf,YAAAD,EAAK;AAAA,cAAU;AAAA;AAAA,eACfA,EAAK,YAAYE,CAAM,GACvBF,EAAK,aAAa5B,CAAC,GACnBqC,EAAQT,CAAI,GACZkE,EAAmB,OAAOhE,CAAM,GAEhCH,EAAYD,CAAO;AAAA,UAAA,GAEpB5B,IAAO,CAAGhB,MAAA;AACT,YAAAqH,EAAIrH,CAAC,GACI4B,IAAA;AAEH,kBAAAkB,IAAK,IAAIC;AACf,YAAAD,EAAK;AAAA,cAAU;AAAA;AAAA,eACfA,EAAK,YAAYE,CAAM,GACvBF,EAAK,WAAW9C,CAAC,GACjBuD,EAAQT,CAAI,GACZkE,EAAmB,OAAOhE,CAAM,GAEhCH,EAAYD,CAAO;AAAA,UAAA;AAAA,QACpB,CACA;AAEE,YAAA;AACI,gBAAAxD,IAAK2F,EAAK;AAEhB,cAAG3F,KAAM;AAAY,kBAAA,IAAI,MAAM,oDAAoD;AAC7E,gBAAAsD,IAAM/C,EAAgB,IAAIP,CAAI;AACpC,cAAG,CAACsD;AAAO,kBAAM,IAAI,MAAM,SAAStD,CAAI,iCAAiC0H,CAAW,EAAE;AAEhF,gBAAAtG,IAAOuE,EAAK,cAEZtE,IAAKsE,EAAK,UAAU,MAAIA,EAAK,YAAYnC,CAAO,CAAC,KAAG,IAGpDc,IAAW,IAAI,mBACfpB,IAA6B;AAAA,YAClC,MAAAlD;AAAA,YACA,QAAAoB;AAAA,YACA,IAAI,WAAU;AACN,qBAAAoB;AAAA,YACR;AAAA,YACA,SAAAiC;AAAA,YACA,eAAeF,GAAQ;AACnB,kBAAA/B;AAAiB,uBAAAU;AACd,oBAAAe,IAAI,IAAIN;AACd,cAAAM,EAAI;AAAA,gBAAU;AAAA;AAAA,iBACdA,EAAI,YAAYL,CAAM;AACtB,oBAAMM,KAAgB,CAAA;AACtB,qBAAAD,EAAI,WAAWM,GAAQ,CAAAT,OAAGG,EAAI,aAAaH,IAAEI,EAAI,CAAC,GAC1CV,EAAA,KAAK,GAAGU,EAAI,GAEpBC,EAAQF,CAAG,GACJf;AAAA,YACR;AAAA,YACA,mBAAmB5B,GAA6B;AAC/C,qBAAAa,EAAgBe,GAAQ5B,CAAI,GACrB4B;AAAA,YACR;AAAA,YACA,aAAYoB,EAAW;AAAA,YACvB,YAAW,MAAIA,EAAW,MAAM;AAAA,YAChC,CAAC,OAAO,aAAa,GAAE,MAAIlC,EAAiBc,CAAO;AAAA,UAAA;AAEjC,UAAA0E,EAAA,IAAIhE,GAAOV,CAAO;AAG/B,gBAAAgF,IAA2BjF,GAAe,MAAI9B,GAAOmC,GAAMtD,GAAKoB,GAAO,GAAGC,CAAI,GAAE6B,CAAO;AAE7F,UAAGgF,aAAkB,UAAgBA,EAAA,KAAK,OAAGvG,EAAQwG,CAAC,GAAE,CAAGvH,MAAAgB,EAAOhB,CAAC,CAAC,IAC/De,EAAQuG,CAAM;AAAA,iBACbtH,GAAE;AACR,UAAAgB,EAAOhB,CAAU;AAAA,QAClB;AACA;AAAA,MACD;AAAA,MACA,KAAK,GAA2B;AACzB,cAAAgD,IAAO+B,EAAK,cAEZrD,IAAQqF,EAAe,IAAI/D,CAAM;AACvC,YAAGtB,KAAS,MAAK;AAChB,kBAAQ,IAAI,GAAGoF,CAAW,kCAAkC9D,CAAM,EAAE;AACpE;AAAA,QACD;AACG,YAAA;AACF,UAAA/B,EAAY,IAAIS,CAAO,IAAIqD,EAAK,YAAa,CAAA;AAAA,iBACvC/E,GAAE;AACG,UAAAmB,EAAA,IAAIO,CAAO,IAAI1B,CAAU;AAAA,QAAA,UACpC;AACA,UAAA+G,EAAe,OAAO/D,CAAM,GAC5B/B,EAAY,OAAOS,CAAO,GAC1BP,EAAW,OAAOO,CAAO;AAAA,QAC1B;AACA;AAAA,MACD;AAAA,MACA,KAAK,GAAyB;AACvB,cAAAsB,IAAO+B,EAAK,cAEZrD,IAAQqF,EAAe,IAAI/D,CAAM;AACvC,YAAGtB,KAAS,MAAK;AAChB,kBAAQ,IAAI,GAAGoF,CAAW,kCAAkC9D,CAAM,EAAE;AACpE;AAAA,QACD;AAEG,YAAA;AACwB,UAAAmE,IAAA,IAC1BhG,EAAW,IAAIO,CAAO,IAAIqD,EAAK,UAAW,CAAA;AAAA,iBACpC/E,GAAE;AACG,UAAAmB,EAAA,IAAIO,CAAO,IAAI1B,CAAU;AAAA,QAAA,UACpC;AACA,UAAA+G,EAAe,OAAO/D,CAAM,GAC5B/B,EAAY,OAAOS,CAAO,GAC1BP,EAAW,OAAOO,CAAO;AAAA,QAC1B;AACA;AAAA,MACD;AAAA,MACA,KAAK,GAA0B;AACxB,cAAAsB,IAAO+B,EAAK;AACd,YAAAmC,IAAIF,EAAmB,IAAIhE,CAAM;AACrC,YAAG,CAACkE,GAAI;AACP,kBAAQ,IAAI,GAAGJ,CAAW,uCAAuC9D,CAAM,EAAE;AACzE;AAAA,QACD;AACA,QAAAkE,EAAI,WAAW;AACf;AAAA,MACD;AAAA,MACA,KAAK,GAA6B;AAC3B,cAAAlE,IAAO+B,EAAK;AACd,YAAAmC,IAAIF,EAAmB,IAAIhE,CAAM;AACrC,YAAG,CAACkE,GAAI;AACP,kBAAQ,IAAI,GAAGJ,CAAW,uCAAuC9D,CAAM,EAAE;AACzE;AAAA,QACD;AACA,cAAMJ,IAAmB,CAAA,GACnBnC,IAAKsE,EAAK,UAAU,MAAIA,EAAK,YAAYnC,CAAO,CAAC,KAAG;AAC1D,QAAAT,EAAkB+E,GAAIzG,CAAI;AAC1B;AAAA,MACD;AAAA,MACA,KAAK,GAA2B;AACzB,cAAAuC,IAAO+B,EAAK;AACd,YAAArD,IAAQqF,EAAe,IAAI/D,CAAM;AACrC,YAAG,CAACtB,GAAQ;AACX,kBAAQ,IAAI,GAAGoF,CAAW,kCAAkC9D,CAAM,EAAE;AACpE;AAAA,QACD;AACA,cAAMJ,IAAmB,CAAA,GACnBnC,IAAKsE,EAAK,UAAU,MAAIA,EAAK,YAAYnC,CAAO,CAAC,KAAG;AAE1D,QAAAT,EAAkBT,GAAQjB,CAAI;AAC9B;AAAA,MACD;AAAA,IACD;AAAA,WACM,GAAE;AACR,YAAQ,MAAM,CAAC;AAAA,EAChB;AACD;AC7OO,MAAM+G,GAAS;AAAA,EACJ;AAAA,EACA;AAAA,EACT;AAAA,EACS;AAAA,EAIjB,YAAYlB,GAAgBmB,IAAY,GAAEC,IAAepB,EAAI,QAAO;AACnE,SAAK,OAAKA,GACV,KAAK,QAAM,IAAI,SAASA,EAAI,MAAM,GAClC,KAAK,OAAKmB,GACV,KAAK,SAAOA,IAAIC;AAAA,EACjB;AAAA,EAEA,UAAUrB,GAAYsB,IAAY,GAAEC,IAAYvB,EAAE,QAAa;AAC9D,QAAIoB,IAAI,KAAK;AAGb,QAFgB,KAAK,SAAOA,IAEfG;AAAW,YAAA,IAAI,WAAW,6CAA6C;AAEpF,aAAQ1C,IAAEyC,GAAKzC,IAAEyC,IAAIC,GAAK1C;AACzB,MAAAmB,EAAEnB,CAAC,IAAE,KAAK,KAAKuC,GAAK;AACrB,SAAK,OAAKA;AAAA,EACX;AAAA,EAEA,KAAKlB,GAAkB;AAClB,QAAAsB,IAAE,KAAK;AACX,WAAGtB,IAAEsB,MAAKA,IAAAtB,IAAE,IAAE,IAAGA,IACjB,KAAK,QAAMsB,GACJA;AAAA,EACR;AAAA,EAEA,YAAmB;AACX,WAAA,KAAK,SAAO,KAAK;AAAA,EACzB;AAAA,EAEA,UAAqB;AACb,WAAA,KAAK,KAAK,MAAM,KAAK,MAAK,KAAK,OAAK,KAAK,MAAM;AAAA,EACvD;AAAA,EAEA,WAAWH,GAA2B;AAClC,QAAAA,IAAO,KAAK,UAAU;AAAG,YAAM,IAAI,WAAW;AACjD,WAAO,KAAK,KAAK,MAAM,KAAK,MAAK,KAAK,QAAMA,CAAM;AAAA,EACnD;AAAA,EAEA,WAAkB;AACjB,WAAO,KAAK,MAAM,SAAS,KAAK,MAAM;AAAA,EACvC;AAAA,EAEA,cAAsB;AACd,WAAA,KAAK,SAAY,KAAA;AAAA,EACzB;AAAA,EAEA,kBAAiC;AAC1B,UAAArB,IAAE,KAAK;AACN,WAAAA,IAAE,IAAEA,KAAG,IAAG;AAAA,EAClB;AAAA,EAEA,YAAmB;AAClB,UAAME,IAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AACrC,gBAAK,QAAM,GACJA;AAAA,EACR;AAAA,EAEA,aAAoB;AACnB,UAAMA,IAAE,KAAK,MAAM,UAAU,KAAK,IAAI;AACtC,gBAAK,QAAM,GACJA;AAAA,EACR;AAAA,EAEA,WAAkB;AACjB,WAAO,OAAO,aAAa,KAAK,WAAY,CAAA;AAAA,EAC7C;AAAA,EAEA,UAAiB;AAChB,UAAMA,IAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AACrC,gBAAK,QAAM,GACJA;AAAA,EACR;AAAA,EAEA,WAAkB;AACjB,WAAO,OAAO,KAAK,QAAS,CAAA,IAAE,OAAO,KAAG,EAAE,IAAE,OAAO,KAAK,cAAY,CAAC;AAAA,EACtE;AAAA,EAEA,YAAmB;AAClB,UAAMA,IAAE,KAAK,MAAM,WAAW,KAAK,IAAI;AACvC,gBAAK,QAAM,GACJA;AAAA,EACR;AAAA,EAEA,aAAoB;AACnB,UAAMA,IAAE,KAAK,MAAM,WAAW,KAAK,IAAI;AACvC,gBAAK,QAAM,GACJA;AAAA,EACR;AAAA,EAEA,aAAyB;AACpB,QAAAmB,IAAO,KAAK;AAChB,WAAGA,KAAS,KAAW,OAChB,IAAI,YAAY,EAAE,OAAO,KAAK,WAAWA,CAAM,CAAC;AAAA,EACxD;AAAA,EAEA,aAAoB;AACnB,QAAIJ,IAAO,GACPQ,IAAK;AACT,eAAW;AACJ,YAAAC,IAAK,KAAK;AAChB,UAAGA,KAAM;AAAU,eAAAD,KAAM,IAAE,IAAG,CAACR;AAC3B,UAAA,EAAAS,IAAK;AACR,eAAAT,KAAQS,KAAMD,GACPR;AAER,MAAAA,MAASS,IAAK,QAAOD,GACfA,KAAA;AAAA,IACP;AAAA,EACD;AAAA,EAEA,UAAaE,GAA8B;AACpC,UAAAN,IAAO,KAAK;AAClB,QAAGA,KAAS;AAAW,aAAA;AACvB,UAAMrH,IAAS,CAAA;AACP,aAAA6E,IAAE,GAAGA,IAAEwC,GAAQxC;AACtB,MAAA7E,EAAI6E,CAAC,IAAE8C,EAAa,KAAK,IAAI;AACvB,WAAA3H;AAAA,EACR;AAAA,EAEA,YAAW;AACV,WAAO,IAAIlB,EAAS,KAAK,cAAa,KAAK,WAAA,KAAc,OAAM,KAAK,WAAA,GAAa,KAAK,WAAY,CAAA;AAAA,EACnG;AAAA,EAEA,YAAYyD,IAAmB,IAAG;AAC1B,WAAAkC,EAAY,MAAKlC,CAAO;AAAA,EAChC;AACD;AClIO,IAAI9C,IAAY,IAGnBmI,GAAwCC,GACxCC,KAA0B,IAAI,QAAc,CAACpG,GAAIsF,MAAM,CAACY,GAA0BC,CAAwB,IAAE,CAACnG,GAAIsF,CAAG,CAAC;AAEzH,eAAsBe,KAAe;AAC9B;AACL,QAAG,MAAMD,GAA0B,KAAK,MAAI,IAAK,MAAI,EAAK;AACzD;AACH;AAGA,IAAIE;AACJ,IAAG7I,GAAS;AACL,QAAA8I,IAAI,QAAQ,IAAI;AACtB,EAAIA,IAIHD,IAAgB,OAAME,MAAQ;AACvB,UAAAC,IAAI,IAAI,IAAIF,CAAG;AACjB,WAAAE,EAAA,SAAOD,EAAM,YACV,KAAK,MAAM,OAAO,IAAI,GAAG,UAAUC,GAAI,QAAQ,IAAI,aAAW,OAAK,CAAA,IAAI;AAAA,MAC7E,SAAQ;AAAA,QACP,QAAO,eAAa,QAAQ,IAAI;AAAA,MACjC;AAAA,IAAA,CACA;AAAA,EAAA,KAVF,QAAQ,KAAK,gDAAgD,GAC7DH,IAAgB,aAAU,CAAA;AAW5B,WAAS,cAAc;AACtB,EAAAA,IAAgB,OAAME,MAAQ,IAAI,UAAU,OAAK,SAAS,SAAS,OAAO,UAAU,CAAC,IAAE,UAAQA,CAAK;AAAA;AAC1F,QAAA,IAAI,MAAM,kBAAkB;AAGvC,SAASE,GAASzI,GAAS;AAC1B,QAAMgB,IAAOkH;AACb,EAAAC,KAA0B,IAAI,QAAc,CAACpG,GAAIsF,MAAM,CAACY,GAA0BC,CAAwB,IAAE,CAACnG,GAAIsF,CAAG,CAAC,GACrHrG,EAAOhB,CAAC,GAERiH,GAAkBjH,CAAC;AACpB;AAKO,IAAImD,IAA6B;AAAA,CACvC,eAAeuF,IAAW;AAC1B,QAAM,QAAQ;AAEd,MAAIC,IAAa7B,GACb8B,wBAAkB;AAEhB,QAAAL,IAAM,IAAI;AACV,EAAAA,EAAA,IAAI,QAAOI,CAAY;AACrB,WAAArI,KAAOX,EAAgB;AAC9B,IAAAiJ,EAAc,IAAItI,CAAG,GACfiI,EAAA,OAAO,QAAOjI,CAAG;AAIlB,QAAAuI,IAAU,MAAMR,EAAgBE,CAAK;AAE3C,EAAAM,EAAU,UAAQ,MAAI;AACV,IAAA1F,IAAA,MACCrD,IAAA,IACZ,QAAQ,IAAI,wBAAwB;AAC9B,UAAAE,IAAE,IAAI,MAAM,mBAAmB;AACrC,IAAAyI,GAASzI,CAAC,GACV,WAAW0I,GAAU,GAAI;AAAA,EAAA,GAE1BG,EAAU,SAAO,YAAS;AACzB,YAAQ,IAAI,qBAAqB;AAE9B,QAAA;AACS,MAAA1F,IAAA0F;AAEX,YAAMC,IAAW,IAAI,IAAInJ,EAAgB,KAAM,CAAA,GACzCoJ,IAAS,IAAI,IAAIH,CAAa;AAEpC,eAAQxJ,KAAQ0J;AACZ,QAAAC,EAAS,OAAO3J,CAAI,KACtB0J,EAAW,OAAO1J,CAAI;AAErB,MAAA0J,EAAW,QAAMC,EAAS,OACzBjC,KAAa6B,IAAc,MAAM5I,EAAmB,MAAK,KAAI+G,GAAY,CAAC,GAAGgC,EAAW,KAAK,CAAC,GAAE,CAAC,GAAGC,EAAS,KAAA,CAAM,CAAC,IAClH,MAAMhJ,EAAmB,MAAK,KAAI,CAAC,GAAG+I,EAAW,KAAM,CAAA,GAAE,CAAC,GAAGC,EAAS,KAAA,CAAM,CAAC,IAC3EjC,KAAa6B,KAAoB,MAAA5I,EAAmB,MAAK,KAAI+G,CAAW,GAIpEhH,IAAA,IACcmI;aAIpBjI,GAAS;AACP,cAAA,MAAMA,EAAE,KAAK,GACrByI,GAASzI,CAAC,GAEC6I,GAAA,MAAM,KAAK,yBAAyB;AAC/C;AAAA,IACD;AAAA,EAAA,GAGDA,EAAU,aAAW,eACXA,EAAA,YAAU,SAAmB7I,GAAgB;AACtD,UAAM+E,IAAK/E,EAAE;AAEV,IAAA,OAAO+E,KAAM,WACf,QAAQ,IAAIA,CAAI,IAGhBqC,GAAW,IAAII,GAAU,IAAI,WAAWzC,CAAI,CAAC,CAAC;AAAA,EAC/C;AAEF,GAAE;ACtHK,IAAI+B,IAAYrH;AAEvB,eAAsBuJ,GAAQC,GAAiB;AAC9C,EAAAnC,IAAYmC,KAAM,OAAK,GAAGA,CAAI,KAAKxJ,CAAK,MAAKA;AAC1C,MAAA;AACC,IAAAK,KAAmB,MAAAC,EAAmB,MAAK,KAAI+G,CAAW;AAAA,WACvD,GAAE;AACR,YAAQ,MAAM,CAAC;AAAA,EAChB;AACD;ACZO,SAASoC,GAAY9J,GAAc;AACzC,SAAO,SAASiF,GAAY;AACd,IAAAzE,GAAAR,KAAMiF,EAAO,UAAU,YAAY,MAAKA,CAAM,EAAE,MAAM,QAAQ,KAAK;AAAA,EAAA;AAElF;ACQO,SAAS8E,GAAkBlF,GAAW;AAC5C,SAAO,SAA8CI,GAA6B;AACjF,IAAAO,GAAc,KAAK,CAACX,GAAG,CAAAf,MAAGA,aAAamB,GAAO,CAACU,GAAKE,GAAErC,MAAWqC,EAAQ,MAAMF,GAAKnC,CAAO,CAAC,CAAC,GAChFiC,GAAA,IAAIZ,GAAG,CAACc,GAAKnC,MAAUyB,EAAO,KAAKU,GAAKnC,CAAO,CAAC;AAAA,EAAA;AAE/D;ACOA,QAAA,QAAA,EAAA,KAAA,MAAAwG,EAAA,EAAgB,KAAK,CAACC,MAAI,OAAO,OAAO,YAAWA,CAAC,CAAC;AAG9C,MAAMC,GAAG;AAAA;AAAA,EAGf,OAAuB,KAAW7J;AAAA,EAElC,WAAkB,WAAkB;AAAQ,WAAAqH;AAAA,EAAY;AAAA,EAExD,OAAc,QAAQmC,GAAa;AAAC,WAAOD,GAAQC,CAAI;AAAA,EAAE;AAAA;AAAA,EAGzD,WAAkB,cAAsB;AAAQ,WAAAnJ;AAAA,EAAY;AAAA,EAE5D,WAAkB,qBAAmC;AAAC,WAAOsI,GAAc;AAAA,EAAE;AAAA;AAAA,EAG7E,OAAc,eAAahE;AAAA,EAC3B,OAAc,iBAAe,CAAIhF,GAAaoB,MAAiB,IAAIsD,EAAe1E,GAAKoB,CAAM;AAAA,EAC7F,OAAc,mBAAiBwD;AAAA,EAC/B,OAAc,qBAAmBE;AAAA,EAEjC,OAAc,YAAUT;AAAA;AAAA,EACxB,OAAc,eAAa1D;AAAA;AAAA,EAE3B,OAAc,aAAoCyC;AAAA;AAAA,EAGlD,OAAc,eAAa5C;AAAA,EAC3B,OAAc,iBAAeK;AAAA,EAG7B,OAAc,wBAAsB,OAAMb,MAAgBmK,MAAmC,MAAMxJ,EAAmB,OAAM,yBAAwBX,GAAK,GAAGmK,CAAK;AAAA,EACjK,OAAc,aAAW,UAASA,MAAmC,MAAMxJ,EAAmB,OAAM,cAAa,GAAGwJ,CAAK;AAAA,EACzH,OAAc,YAAU,OAAMnK,MAAiC,MAAMW,EAAmB,OAAM,aAAYX,CAAI;AAAA,EAC9G,OAAc,cAAY,YAA4B,MAAMW,EAAmB,OAAM,aAAa;AAAA,EAClG,OAAc,oBAAkB,YAA4B,MAAMA,EAAmB,OAAM,mBAAmB;AAAA,EAC9G,OAAc,mBAAiB,YAA6C,MAAMA,EAAmB,OAAM,kBAAkB;AAAA,EAC7H,OAAc,OAAK,OAAMyJ,MAAsC,MAAMzJ,EAAmB,OAAM,QAAOyJ,CAAU;AAAA,EAE/G,OAAc,OAAK9E;AAAA,EACnB,OAAc,aAAWP;AAAA,EACzB,OAAc,aAAW/D;AAC1B;;;;;;;;;;;;;;;;;;;;;;;;;"}